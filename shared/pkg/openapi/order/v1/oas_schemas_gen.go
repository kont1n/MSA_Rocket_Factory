// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *GenericErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/bad_gateway_error
type BadGatewayError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadGatewayError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadGatewayError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadGatewayError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadGatewayError) SetMessage(val string) {
	s.Message = val
}

func (*BadGatewayError) cancelOrderRes()    {}
func (*BadGatewayError) createOrderRes()    {}
func (*BadGatewayError) getOrderByUUIDRes() {}
func (*BadGatewayError) payOrderRes()       {}

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) cancelOrderRes()    {}
func (*BadRequestError) createOrderRes()    {}
func (*BadRequestError) getOrderByUUIDRes() {}
func (*BadRequestError) payOrderRes()       {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// Ref: #/components/schemas/conflict_error
type ConflictError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) cancelOrderRes()    {}
func (*ConflictError) createOrderRes()    {}
func (*ConflictError) getOrderByUUIDRes() {}
func (*ConflictError) payOrderRes()       {}

// Ref: #/components/schemas/create_order_request
type CreateOrderRequest struct {
	// UUID пользователя.
	UserUUID  uuid.UUID   `json:"user_uuid"`
	PartUuids []uuid.UUID `json:"part_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequest) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *CreateOrderRequest) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequest) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *CreateOrderRequest) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// Ref: #/components/schemas/create_order_response
type CreateOrderResponse struct {
	OrderUUID  OrderUUID     `json:"order_uuid"`
	TotalPrice OptTotalPrice `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponse) GetOrderUUID() OrderUUID {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponse) GetTotalPrice() OptTotalPrice {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponse) SetOrderUUID(val OrderUUID) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponse) SetTotalPrice(val OptTotalPrice) {
	s.TotalPrice = val
}

func (*CreateOrderResponse) createOrderRes() {}

// Ref: #/components/schemas/forbidden_error
type ForbiddenError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ForbiddenError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ForbiddenError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ForbiddenError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ForbiddenError) SetMessage(val string) {
	s.Message = val
}

func (*ForbiddenError) cancelOrderRes()    {}
func (*ForbiddenError) createOrderRes()    {}
func (*ForbiddenError) getOrderByUUIDRes() {}
func (*ForbiddenError) payOrderRes()       {}

// Ref: #/components/schemas/generic_error
type GenericError struct {
	// HTTP-код ошибки.
	Code OptInt `json:"code"`
	// Описание ошибки.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *GenericError) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GenericError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *GenericError) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GenericError) SetMessage(val OptString) {
	s.Message = val
}

// GenericErrorStatusCode wraps GenericError with StatusCode.
type GenericErrorStatusCode struct {
	StatusCode int
	Response   GenericError
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorStatusCode) GetResponse() GenericError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorStatusCode) SetResponse(val GenericError) {
	s.Response = val
}

// Ref: #/components/schemas/get_order_response
type GetOrderResponse struct {
	// UUID заказа.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// UUID пользователя.
	UserUUID  uuid.UUID   `json:"user_uuid"`
	PartUuids []uuid.UUID `json:"part_uuids"`
	// Сумма заказа.
	TotalPrice OptFloat32 `json:"total_price"`
	// UUID транзакции.
	TransactionUUID OptUUID                          `json:"transaction_uuid"`
	PaymentMethod   OptGetOrderResponsePaymentMethod `json:"payment_method"`
	Status          OptGetOrderResponseStatus        `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *GetOrderResponse) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *GetOrderResponse) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *GetOrderResponse) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *GetOrderResponse) GetTotalPrice() OptFloat32 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *GetOrderResponse) GetTransactionUUID() OptUUID {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *GetOrderResponse) GetPaymentMethod() OptGetOrderResponsePaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *GetOrderResponse) GetStatus() OptGetOrderResponseStatus {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *GetOrderResponse) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *GetOrderResponse) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *GetOrderResponse) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *GetOrderResponse) SetTotalPrice(val OptFloat32) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *GetOrderResponse) SetTransactionUUID(val OptUUID) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *GetOrderResponse) SetPaymentMethod(val OptGetOrderResponsePaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *GetOrderResponse) SetStatus(val OptGetOrderResponseStatus) {
	s.Status = val
}

func (*GetOrderResponse) getOrderByUUIDRes() {}

type GetOrderResponsePaymentMethod int

const (
	GetOrderResponsePaymentMethod0 GetOrderResponsePaymentMethod = 0
	GetOrderResponsePaymentMethod1 GetOrderResponsePaymentMethod = 1
	GetOrderResponsePaymentMethod2 GetOrderResponsePaymentMethod = 2
	GetOrderResponsePaymentMethod3 GetOrderResponsePaymentMethod = 3
	GetOrderResponsePaymentMethod4 GetOrderResponsePaymentMethod = 4
)

// AllValues returns all GetOrderResponsePaymentMethod values.
func (GetOrderResponsePaymentMethod) AllValues() []GetOrderResponsePaymentMethod {
	return []GetOrderResponsePaymentMethod{
		GetOrderResponsePaymentMethod0,
		GetOrderResponsePaymentMethod1,
		GetOrderResponsePaymentMethod2,
		GetOrderResponsePaymentMethod3,
		GetOrderResponsePaymentMethod4,
	}
}

type GetOrderResponseStatus string

const (
	GetOrderResponseStatusPENDINGPAYMENT GetOrderResponseStatus = "PENDING_PAYMENT"
	GetOrderResponseStatusPAID           GetOrderResponseStatus = "PAID"
	GetOrderResponseStatusCANCELLED      GetOrderResponseStatus = "CANCELLED"
)

// AllValues returns all GetOrderResponseStatus values.
func (GetOrderResponseStatus) AllValues() []GetOrderResponseStatus {
	return []GetOrderResponseStatus{
		GetOrderResponseStatusPENDINGPAYMENT,
		GetOrderResponseStatusPAID,
		GetOrderResponseStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetOrderResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case GetOrderResponseStatusPENDINGPAYMENT:
		return []byte(s), nil
	case GetOrderResponseStatusPAID:
		return []byte(s), nil
	case GetOrderResponseStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetOrderResponseStatus) UnmarshalText(data []byte) error {
	switch GetOrderResponseStatus(data) {
	case GetOrderResponseStatusPENDINGPAYMENT:
		*s = GetOrderResponseStatusPENDINGPAYMENT
		return nil
	case GetOrderResponseStatusPAID:
		*s = GetOrderResponseStatusPAID
		return nil
	case GetOrderResponseStatusCANCELLED:
		*s = GetOrderResponseStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) cancelOrderRes()    {}
func (*InternalServerError) createOrderRes()    {}
func (*InternalServerError) getOrderByUUIDRes() {}
func (*InternalServerError) payOrderRes()       {}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) cancelOrderRes()    {}
func (*NotFoundError) createOrderRes()    {}
func (*NotFoundError) getOrderByUUIDRes() {}
func (*NotFoundError) payOrderRes()       {}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrderResponsePaymentMethod returns new OptGetOrderResponsePaymentMethod with value set to v.
func NewOptGetOrderResponsePaymentMethod(v GetOrderResponsePaymentMethod) OptGetOrderResponsePaymentMethod {
	return OptGetOrderResponsePaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptGetOrderResponsePaymentMethod is optional GetOrderResponsePaymentMethod.
type OptGetOrderResponsePaymentMethod struct {
	Value GetOrderResponsePaymentMethod
	Set   bool
}

// IsSet returns true if OptGetOrderResponsePaymentMethod was set.
func (o OptGetOrderResponsePaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrderResponsePaymentMethod) Reset() {
	var v GetOrderResponsePaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrderResponsePaymentMethod) SetTo(v GetOrderResponsePaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrderResponsePaymentMethod) Get() (v GetOrderResponsePaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrderResponsePaymentMethod) Or(d GetOrderResponsePaymentMethod) GetOrderResponsePaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrderResponseStatus returns new OptGetOrderResponseStatus with value set to v.
func NewOptGetOrderResponseStatus(v GetOrderResponseStatus) OptGetOrderResponseStatus {
	return OptGetOrderResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptGetOrderResponseStatus is optional GetOrderResponseStatus.
type OptGetOrderResponseStatus struct {
	Value GetOrderResponseStatus
	Set   bool
}

// IsSet returns true if OptGetOrderResponseStatus was set.
func (o OptGetOrderResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrderResponseStatus) Reset() {
	var v GetOrderResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrderResponseStatus) SetTo(v GetOrderResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrderResponseStatus) Get() (v GetOrderResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrderResponseStatus) Or(d GetOrderResponseStatus) GetOrderResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTotalPrice returns new OptTotalPrice with value set to v.
func NewOptTotalPrice(v TotalPrice) OptTotalPrice {
	return OptTotalPrice{
		Value: v,
		Set:   true,
	}
}

// OptTotalPrice is optional TotalPrice.
type OptTotalPrice struct {
	Value TotalPrice
	Set   bool
}

// IsSet returns true if OptTotalPrice was set.
func (o OptTotalPrice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTotalPrice) Reset() {
	var v TotalPrice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTotalPrice) SetTo(v TotalPrice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTotalPrice) Get() (v TotalPrice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTotalPrice) Or(d TotalPrice) TotalPrice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OrderUUID string

// Ref: #/components/schemas/pay_order_request
type PayOrderRequest struct {
	PaymentMethod PayOrderRequestPaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderRequest) GetPaymentMethod() PayOrderRequestPaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderRequest) SetPaymentMethod(val PayOrderRequestPaymentMethod) {
	s.PaymentMethod = val
}

type PayOrderRequestPaymentMethod int

const (
	PayOrderRequestPaymentMethod0 PayOrderRequestPaymentMethod = 0
	PayOrderRequestPaymentMethod1 PayOrderRequestPaymentMethod = 1
	PayOrderRequestPaymentMethod2 PayOrderRequestPaymentMethod = 2
	PayOrderRequestPaymentMethod3 PayOrderRequestPaymentMethod = 3
	PayOrderRequestPaymentMethod4 PayOrderRequestPaymentMethod = 4
)

// AllValues returns all PayOrderRequestPaymentMethod values.
func (PayOrderRequestPaymentMethod) AllValues() []PayOrderRequestPaymentMethod {
	return []PayOrderRequestPaymentMethod{
		PayOrderRequestPaymentMethod0,
		PayOrderRequestPaymentMethod1,
		PayOrderRequestPaymentMethod2,
		PayOrderRequestPaymentMethod3,
		PayOrderRequestPaymentMethod4,
	}
}

// Ref: #/components/schemas/pay_order_response
type PayOrderResponse struct {
	// UUID транзакции.
	TransactionUUID uuid.UUID `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResponse) GetTransactionUUID() uuid.UUID {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResponse) SetTransactionUUID(val uuid.UUID) {
	s.TransactionUUID = val
}

func (*PayOrderResponse) payOrderRes() {}

// Ref: #/components/schemas/rate_limit_error
type RateLimitError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *RateLimitError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *RateLimitError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *RateLimitError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *RateLimitError) SetMessage(val string) {
	s.Message = val
}

func (*RateLimitError) cancelOrderRes()    {}
func (*RateLimitError) createOrderRes()    {}
func (*RateLimitError) getOrderByUUIDRes() {}
func (*RateLimitError) payOrderRes()       {}

// Ref: #/components/schemas/service_unavailable_error
type ServiceUnavailableError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ServiceUnavailableError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ServiceUnavailableError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ServiceUnavailableError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ServiceUnavailableError) SetMessage(val string) {
	s.Message = val
}

func (*ServiceUnavailableError) cancelOrderRes()    {}
func (*ServiceUnavailableError) createOrderRes()    {}
func (*ServiceUnavailableError) getOrderByUUIDRes() {}
func (*ServiceUnavailableError) payOrderRes()       {}

type TotalPrice float64

// Ref: #/components/schemas/unauthorized_error
type UnauthorizedError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnauthorizedError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnauthorizedError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnauthorizedError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnauthorizedError) SetMessage(val string) {
	s.Message = val
}

func (*UnauthorizedError) cancelOrderRes()    {}
func (*UnauthorizedError) createOrderRes()    {}
func (*UnauthorizedError) getOrderByUUIDRes() {}
func (*UnauthorizedError) payOrderRes()       {}
