//go:build integration

package integration

import (
	"context"
	"os"
	"time"

	"github.com/docker/go-connections/nat"
	"github.com/testcontainers/testcontainers-go/wait"
	"go.uber.org/zap"

	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/logger"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/testcontainers"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/testcontainers/app"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/testcontainers/network"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/testcontainers/path"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/testcontainers/postgres"
)

const (
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	orderAppName    = "order-app"
	orderDockerfile = "deploy/docker/order/Dockerfile"

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	httpPortKey = "HTTP_PORT"

	// –ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	loggerLevelValue = "debug"
	startupTimeout   = 3 * time.Minute
)

// TestEnvironment ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
type TestEnvironment struct {
	Network  *network.Network
	Postgres *postgres.Container
	App      *app.Container
}

// setupTestEnvironment ‚Äî –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: —Å–µ—Ç—å, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
func setupTestEnvironment(ctx context.Context) *TestEnvironment {
	logger.Info(ctx, "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

	// –®–∞–≥ 1: –°–æ–∑–¥–∞—ë–º –æ–±—â—É—é Docker-—Å–µ—Ç—å
	generatedNetwork, err := network.NewNetwork(ctx, projectName)
	if err != nil {
		logger.Fatal(ctx, "–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—â—É—é —Å–µ—Ç—å", zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –°–µ—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")

	// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PostgreSQL —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ
	postgresUsername := getEnvWithLogging(ctx, testcontainers.PostgresUsernameKey)
	postgresPassword := getEnvWithLogging(ctx, testcontainers.PostgresPasswordKey)
	postgresImageName := getEnvWithLogging(ctx, testcontainers.PostgresImageNameKey)
	postgresDatabase := getEnvWithLogging(ctx, testcontainers.PostgresDatabaseKey)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç HTTP –¥–ª—è waitStrategy
	httpPort := getEnvWithLogging(ctx, httpPortKey)

	// –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å PostgreSQL
	generatedPostgres, err := postgres.NewContainer(ctx,
		postgres.WithNetworkName(generatedNetwork.Name()),
		postgres.WithContainerName(testcontainers.PostgresContainerName),
		postgres.WithImageName(postgresImageName),
		postgres.WithDatabase(postgresDatabase),
		postgres.WithAuth(postgresUsername, postgresPassword),
	)
	if err != nil {
		cleanupTestEnvironment(ctx, &TestEnvironment{Network: generatedNetwork})
		logger.Fatal(ctx, "–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL", zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	// –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
	projectRoot := path.GetProjectRoot()

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	appEnv := map[string]string{
		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP
		"HTTP_ADDRESS": "0.0.0.0:" + httpPort,

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
		"LOGGER_LEVEL":   "debug",
		"LOGGER_AS_JSON": "false",

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		testcontainers.PostgresHostKey:     generatedPostgres.Config().ContainerName,
		testcontainers.PostgresPortKey:     "5432",
		testcontainers.PostgresDatabaseKey: generatedPostgres.Config().Database,
		testcontainers.PostgresUsernameKey: generatedPostgres.Config().Username,
		testcontainers.PostgresPasswordKey: generatedPostgres.Config().Password,
		"POSTGRES_SSLMODE":                 "disable",
		"POSTGRES_MIGRATIONS_DIR":          "migrations",
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
	waitStrategy := wait.ForListeningPort(nat.Port(httpPort + "/tcp")).
		WithStartupTimeout(startupTimeout)

	appContainer, err := app.NewContainer(ctx,
		app.WithName(orderAppName),
		app.WithPort(httpPort),
		app.WithDockerfile(projectRoot, orderDockerfile),
		app.WithNetwork(generatedNetwork.Name()),
		app.WithEnv(appEnv),
		app.WithLogOutput(os.Stdout),
		app.WithStartupWait(waitStrategy),
	)
	if err != nil {
		cleanupTestEnvironment(ctx, &TestEnvironment{Network: generatedNetwork, Postgres: generatedPostgres})
		logger.Fatal(ctx, "–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", zap.Error(err))
	}
	logger.Info(ctx, "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	logger.Info(ctx, "üéâ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
	return &TestEnvironment{
		Network:  generatedNetwork,
		Postgres: generatedPostgres,
		App:      appContainer,
	}
}

// getEnvWithLogging –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func getEnvWithLogging(ctx context.Context, key string) string {
	value := os.Getenv(key)
	if value == "" {
		logger.Warn(ctx, "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", zap.String("key", key))
	}

	return value
}
