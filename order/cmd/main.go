package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/google/uuid"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	customMiddleware "github.com/kont1n/MSA_Rocket_Factory/order/internal/middleware"
	orderV1 "github.com/kont1n/MSA_Rocket_Factory/shared/pkg/openapi/order/v1"
	paymentV1 "github.com/kont1n/MSA_Rocket_Factory/shared/pkg/proto/payment/v1"
	inventoryV1 "github.com/kont1n/MSA_Rocket_Factory/shared/pkg/proto/inventory/v1"
)

const (
	httpPort = "8080"
	paymentPort = "50051"
	inventoryPort = "50052"
	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second
)

func main() {
	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
	storage := NewOrderStorage()

	// –°–æ–∑–¥–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ API –ø–ª–∞—Ç–µ–∂–∞
	paymentConn, err := grpc.NewClient(
		net.JoinHostPort("localhost", paymentPort),
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return
	}
	defer func() {
		if cerr := paymentConn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ API –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	inventoryConn, err := grpc.NewClient(
		net.JoinHostPort("localhost", inventoryPort),
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return
	}
	defer func() {
		if cerr := inventoryConn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º gRPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–ª–∞—Ç–µ–∂–∞
	paymentClient := paymentV1.NewPaymentServiceClient(paymentConn)

	// –°–æ–∑–¥–∞–µ–º gRPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	inventoryClient := inventoryV1.NewInventoryServiceClient(inventoryConn)

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API –ø–æ–≥–æ–¥—ã
	orderHandler := NewOrderHandler(storage, paymentClient, inventoryClient)

	// –°–æ–∑–¥–∞–µ–º OpenAPI —Å–µ—Ä–≤–µ—Ä
	orderServer, err := orderV1.NewServer(orderHandler)
	if err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ OpenAPI: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Chi
	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(10 * time.Second))
	r.Use(customMiddleware.RequestLogger)

	// –ú–æ–Ω—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ OpenAPI
	r.Mount("/", orderServer)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:              net.JoinHostPort("localhost", httpPort),
		Handler:           r,
		ReadHeaderTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", httpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err = server.Shutdown(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// OrderStorage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
type OrderStorage struct {
	mu     sync.RWMutex
	orders map[uuid.UUID]*orderV1.OrderDto
}

// NewOrderStorage —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
func NewOrderStorage() *OrderStorage {
	return &OrderStorage{
		orders: make(map[uuid.UUID]*orderV1.OrderDto),
	}
}

// OrderHandler —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å orderV1.Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∑–∞–∫–∞–∑–∞
type OrderHandler struct {
	storage *OrderStorage
	paymentClient paymentV1.PaymentServiceClient
	inventoryClient inventoryV1.InventoryServiceClient
}

// NewOrderHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –∑–∞–∫–∞–∑–∞
func NewOrderHandler(storage *OrderStorage, paymentClient paymentV1.PaymentServiceClient, inventoryClient inventoryV1.InventoryServiceClient) *OrderHandler {
	return &OrderHandler{
		storage: storage,
		paymentClient: paymentClient,
		inventoryClient: inventoryClient,
	}
}

// CreateOrder –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
func (h *OrderHandler) CreateOrder(ctx context.Context, req *orderV1.CreateOrderRequest) (orderV1.CreateOrderRes, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ UUID –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
	partUuids := []string{}
	for _, partUUID := range req.PartUuids {
		partUuids = append(partUuids, partUUID.String())
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
	parts, err := h.inventoryClient.ListParts(ctx, &inventoryV1.ListPartsRequest{
		Filter: &inventoryV1.PartsFilter{
			PartUuid: partUuids,
		},
	})
	
	if err != nil {
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞",
		}, nil
	}
	
	if (len(parts.GetParts()) == 0) || (len(parts.GetParts()) != len(req.PartUuids)) {
		return &orderV1.BadRequestError{
			Code:    http.StatusBadRequest,
			Message: "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏",
		}, nil
	}

	// –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
	totalPrice := 0.0
	for _, part := range parts.GetParts() {
		totalPrice += part.GetPrice()
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
	createOrder := &orderV1.OrderDto{
		OrderUUID: uuid.New(),
		UserUUID:  uuid.UUID(req.UserUUID),
		PartUuids: req.PartUuids,
		Status:    orderV1.OrderStatus("PENDING_PAYMENT"),
		TotalPrice: orderV1.OptFloat32{
			Value: float32(totalPrice),
			Set:   true,
		},
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	h.storage.CreateOrder(createOrder)

	return &orderV1.CreateOrderResponse{
		OrderUUID:  orderV1.OrderUUID(createOrder.GetOrderUUID()),
		TotalPrice: orderV1.OptTotalPrice{
			Value: orderV1.TotalPrice(createOrder.GetTotalPrice().Value),
			Set:   createOrder.GetTotalPrice().Set,
		},
	}, nil
}

// GetOrderByUUID –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –ø–æ UUID
func (h *OrderHandler) GetOrderByUUID(ctx context.Context, params orderV1.GetOrderByUUIDParams) (orderV1.GetOrderByUUIDRes, error) {
	order := h.storage.GetOrder(params.OrderUUID)
	if order == nil {
		return &orderV1.NotFoundError{
			Code:    http.StatusNotFound,
			Message: fmt.Sprint("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º UUID: ", params.OrderUUID),
		}, nil
	}
	return order, nil
}

// PostOrderPayment –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
func (h *OrderHandler) PayOrder(ctx context.Context, req *orderV1.PayOrderRequest, params orderV1.PayOrderParams) (orderV1.PayOrderRes, error) {
	var payOrder *orderV1.OrderDto

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ UUID
	getOrder, _ := h.GetOrderByUUID(ctx, orderV1.GetOrderByUUIDParams{OrderUUID: params.OrderUUID})
	if getOrder == nil {
		return &orderV1.NotFoundError{
			Code:    http.StatusNotFound,
			Message: fmt.Sprint("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º UUID: ", params.OrderUUID),
		}, nil
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –æ–ø–ª–∞—Ç—ã
	payOrder = getOrder.(*orderV1.OrderDto)
	payOrder.PaymentMethod = orderV1.OptPaymentMethod{
		Value: orderV1.PaymentMethod(req.PaymentMethod),
		Set:   true,
	}

	// –û–ø–ª–∞—á–∏–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é gRPC –∫–ª–∏–µ–Ω—Ç–∞
	response, err := h.paymentClient.PayOrder(ctx, &paymentV1.PayOrderRequest{
		OrderUuid: payOrder.GetOrderUUID().String(),
		UserUuid:  payOrder.GetUserUUID().String(),
		PaymentMethod: paymentV1.PaymentMethod(payOrder.GetPaymentMethod().Value),
	})

	if err != nil {
		return &orderV1.InternalServerError{
			Code:    http.StatusInternalServerError,
			Message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
		}, nil
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
	payOrder.TransactionUUID = orderV1.OptUUID{
		Value: uuid.MustParse(response.GetTransactionUuid()),
		Set:   true,
	}
	payOrder.Status = orderV1.OrderStatus("PAID")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	h.storage.PayOrder(payOrder)

	return &orderV1.PayOrderResponse{
		TransactionUUID: orderV1.TransactionUUID(payOrder.GetTransactionUUID().Value),
	}, nil
}

// PostOrderCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
func (h *OrderHandler) CancelOrder(ctx context.Context, params orderV1.CancelOrderParams) (orderV1.CancelOrderRes, error) {
	var cancelOrder *orderV1.OrderDto

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ UUID
	getOrder, _ := h.GetOrderByUUID(ctx, orderV1.GetOrderByUUIDParams{OrderUUID: params.OrderUUID})
	if getOrder == nil {
		return &orderV1.NotFoundError{
			Code:    http.StatusNotFound,
			Message: fmt.Sprint("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º UUID: ", params.OrderUUID),
		}, nil
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞
	cancelOrder = getOrder.(*orderV1.OrderDto)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
	if cancelOrder.GetStatus() == orderV1.OrderStatus("PAID") {
		return &orderV1.ConflictError{
			Code:    http.StatusConflict,
			Message: "–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω—ë–Ω",
		}, nil
	}
	if cancelOrder.GetStatus() == orderV1.OrderStatus("CANCELLED") {
		return &orderV1.CancelOrderNoContent{}, nil
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	cancelOrder.Status = orderV1.OrderStatus("CANCELLED")
	h.storage.CancelOrder(cancelOrder)

	return &orderV1.CancelOrderNoContent{}, nil
}

// NewError —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ GenericError
func (h *OrderHandler) NewError(ctx context.Context, err error) *orderV1.GenericErrorStatusCode {
	code := orderV1.OptInt{}
	code.SetTo(http.StatusInternalServerError)

	message := orderV1.OptString{}
	message.SetTo(err.Error())

	return &orderV1.GenericErrorStatusCode{
		StatusCode: http.StatusInternalServerError,
		Response: orderV1.GenericError{
			Code:    code,
			Message: message,
		},
	}
}

// CreateOrder —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
func (s *OrderStorage) CreateOrder(createOrder *orderV1.OrderDto) {
	s.mu.Lock()
	defer s.mu.Unlock()

	s.orders[createOrder.OrderUUID] = createOrder
}

// GetOrder –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
func (s *OrderStorage) GetOrder(orderUUID uuid.UUID) *orderV1.OrderDto {
	s.mu.RLock()
	defer s.mu.RUnlock()

	order, ok := s.orders[orderUUID]
	if !ok {
		return nil
	}
	return order
}

// PayOrder —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
func (s *OrderStorage) PayOrder(payOrder *orderV1.OrderDto) {
	s.mu.Lock()
	defer s.mu.Unlock()

	s.orders[payOrder.OrderUUID] = payOrder
}

// CancelOrder —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
func (s *OrderStorage) CancelOrder(cancelOrder *orderV1.OrderDto) {
	s.mu.Lock()
	defer s.mu.Unlock()
	
	s.orders[cancelOrder.OrderUUID] = cancelOrder
}
