package middleware

import (
	"log"
	"net/http"
	"time"
)

// RequestLogger –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HTTP –∑–∞–ø—Ä–æ—Å–∞—Ö
func RequestLogger(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		// –°–æ–∑–¥–∞–µ–º response writer –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
		ww := &responseWriter{ResponseWriter: w, statusCode: http.StatusOK}

		// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
		next.ServeHTTP(ww, r)

		// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
		duration := time.Since(start)
		log.Printf("üìù %s %s %d %v", r.Method, r.URL.Path, ww.statusCode, duration)
	})
}

// responseWriter –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è http.ResponseWriter –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
type responseWriter struct {
	http.ResponseWriter
	statusCode int
}

func (rw *responseWriter) WriteHeader(code int) {
	rw.statusCode = code
	rw.ResponseWriter.WriteHeader(code)
}
