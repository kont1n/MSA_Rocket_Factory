name: Test Coverage

on:
  workflow_call:
    inputs:
      modules:
        required: true
        type: string
      go-version:
        required: true
        type: string
      golangci-lint-version:
        required: true
        type: string

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write
      pages: write

    steps:
      # tests
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: ${{ inputs.go-version }}

      - name: Verify dependencies
        run: go mod verify

      - name: Restore cache
        uses: actions/cache@v4.2.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-v1-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-v1-go-

      - name: Check and install dependencies
        run: |
          # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ go.mod —Ñ–∞–π–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º go mod tidy –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          find . -name "go.mod" -type f | while read -r modfile; do
            dir=$(dirname "$modfile")
            echo "Processing module in: $dir"
            cd "$dir"
            go mod tidy
            cd - > /dev/null
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ go.mod –∏ go.sum —Ñ–∞–π–ª–∞—Ö
          git diff --exit-code **/go.mod
          git diff --exit-code **/go.sum

      - name: Install gocov-html
        run: |
          go install github.com/axw/gocov/gocov@v1
          go install github.com/matm/gocov-html/cmd/gocov-html@v1

      - name: Run tests
        run: |
          mkdir -p .github_pages
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ go.work —Ñ–∞–π–ª (–º—É–ª—å—Ç–∏–º–æ–¥—É–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)
          if [ -f "go.work" ]; then
            echo "üèóÔ∏è Detected multi-module workspace with go.work"
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ workspace
            echo "üìä Trying workspace-level coverage..."
            if go test ./... -coverprofile=workspace_coverage.out -covermode=atomic 2>&1; then
              echo "‚úÖ Workspace tests successful"
              mv workspace_coverage.out coverage.out
            else
              echo "‚ùå Workspace tests failed, falling back to per-module approach"
              echo "mode: atomic" > coverage.out
            fi
          else
            echo "üìÅ Standard single/multi-module project"
            echo "mode: atomic" > coverage.out
          fi
          
          # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π —Å —Ç–µ—Å—Ç–∞–º–∏
          modules_with_tests=0
          total_modules=0
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
          coverage_lines_existing=$(($(wc -l < coverage.out) - 1))
          
          if [ "$coverage_lines_existing" -gt 0 ]; then
            echo "‚úÖ Already have coverage data from workspace, skipping per-module collection"
          else
            echo "üìÅ Collecting coverage from individual modules..."
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            while IFS= read -r modfile; do
            dir=$(dirname "$modfile")
            echo "üîç Processing module: $dir"
            total_modules=$((total_modules + 1))
            cd "$dir"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            if find . -name "*_test.go" -type f | grep -q .; then
              echo "üìù Found test files in $dir"
              
              # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏—Å–∫–ª—é—á–∞—è mock —Ñ–∞–π–ª—ã –∏ cmd/main.go
              if go test ./... -coverprofile=tmp_coverage.out -covermode=atomic -coverpkg=./... 2>&1; then
                echo "‚úÖ Tests passed in $dir"
                
                if [ -f tmp_coverage.out ]; then
                  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                  coverage_lines=$(tail -n +2 tmp_coverage.out | wc -l)
                  echo "üìä Coverage lines found: $coverage_lines"
                  
                  if [ "$coverage_lines" -gt 0 ]; then
                    modules_with_tests=$((modules_with_tests + 1))
                    
                    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    tail -n +2 tmp_coverage.out | while IFS= read -r line; do
                      # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ)
                      file_path=$(echo "$line" | cut -d' ' -f1)
                      
                      # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º mock —Ñ–∞–π–ª—ã –∏ main.go
                      if [[ "$file_path" == *"/mocks/"* ]] || [[ "$file_path" == *"cmd/main.go"* ]]; then
                        continue
                      fi
                      
                      # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                      if [[ "$file_path" != /* ]] && [[ "$file_path" != github.com/* ]]; then
                        # –£–±–∏—Ä–∞–µ–º ./ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                        clean_path=$(echo "$file_path" | sed 's|^\./||')
                        if [ "$dir" != "." ]; then
                          file_path="$dir/$clean_path"
                        else
                          file_path="$clean_path"
                        fi
                        
                        # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ
                        echo "$line" | sed "s|^[^ ]*|$file_path|"
                      else
                        echo "$line"
                      fi
                    done >> ../../coverage.out
                    
                    echo "‚úÖ Added coverage data from $dir"
                  else
                    echo "‚ö†Ô∏è No coverage data in $dir"
                  fi
                  
                  rm tmp_coverage.out
                else
                  echo "‚ùå No coverage file generated in $dir"
                fi
              else
                echo "‚ùå Tests failed in $dir, but continuing..."
              fi
            else
              echo "‚ÑπÔ∏è No test files found in $dir"
            fi
            
            cd - > /dev/null
          done < <(find . -name "go.mod" -type f)
          
          echo "üìà Processed $total_modules modules, $modules_with_tests with tests"
          fi
          
          # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
          coverage_lines_final=$(($(wc -l < coverage.out) - 1))
          if [ "$coverage_lines_final" -eq 0 ]; then
            echo "‚ö†Ô∏è No coverage data collected, trying alternative approach..."
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏
            test_packages=()
            while IFS= read -r modfile; do
              dir=$(dirname "$modfile")
              cd "$dir"
              
              # –ò—â–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏
              if find . -name "*_test.go" -type f | grep -q .; then
                # –ü–æ–ª—É—á–∞–µ–º module path –∏–∑ go.mod
                module_path=$(go list -m)
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∞–∫–µ—Ç—ã —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
                for pkg in $(go list ./...); do
                  test_packages+=("$pkg")
                done
              fi
              
              cd - > /dev/null
            done < <(find . -name "go.mod" -type f)
            
            if [ ${#test_packages[@]} -gt 0 ]; then
              echo "üîç Found ${#test_packages[@]} packages with potential tests"
              echo "üìä Running alternative coverage collection..."
              
              # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
              if go test -coverprofile=alt_coverage.out -covermode=atomic "${test_packages[@]}" 2>&1; then
                echo "‚úÖ Alternative method successful"
                mv alt_coverage.out coverage.out
              else
                echo "‚ùå Alternative method also failed"
              fi
            fi
          fi
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ–∫—Ä—ã—Ç–∏—è
          echo "üìä Coverage file info:"
          ls -la coverage.out || echo "coverage.out not found"
          echo "Total lines in coverage.out: $(wc -l < coverage.out)"
          echo "Coverage data lines (excluding header): $(($(wc -l < coverage.out) - 1))"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          echo "üîç First 5 lines of coverage.out:"
          head -5 coverage.out || echo "Cannot read coverage.out"
          
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è
          if [ -s coverage.out ] && [ $(wc -l < coverage.out) -gt 1 ]; then
            echo "üìä Generating coverage reports..."
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            if go tool cover -func=coverage.out > cover.out 2>&1; then              
              echo "‚úÖ Function coverage report generated"
              
              # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
              echo "üìà Coverage summary:"
              cat cover.out | tail -5
              
              # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
              if gocov convert coverage.out | gocov-html > .github_pages/index.html 2>&1; then
                echo "‚úÖ HTML coverage report generated"
              else
                echo "‚ùå Failed to generate HTML report"
                echo "<html><body><h1>Failed to generate coverage report</h1></body></html>" > .github_pages/index.html
              fi
            else
              echo "‚ùå Failed to generate function coverage report"
              cat cover.out || echo "No cover.out to display"
              echo "total:                  (statements)   0.0%" > cover.out
              echo "<html><body><h1>Failed to generate coverage report</h1></body></html>" > .github_pages/index.html
            fi
          else
            echo "‚ö†Ô∏è No coverage data available"
            echo "total:                  (statements)   0.0%" > cover.out
            echo "<html><body><h1>No coverage data available</h1><p>No tests found or no coverage generated</p></body></html>" > .github_pages/index.html
          fi
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ cover.out –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          echo "üîç Content of cover.out:"
          cat cover.out || echo "cover.out not found"

      # pages
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload Artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .github_pages/

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            .github_pages/
            coverage.out
            cover.out
          retention-days: 30

      # badge - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏
      - name: Update coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: cover.out
          green: 80
          yellow: 60
          target: README.md

      - name: Verify Changed files
        if: github.ref == 'refs/heads/main'
        uses: tj-actions/verify-changed-files@v12
        id: verify-changed-files
        with:
          files: README.md

      - name: Debug coverage info
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üìä Coverage files info:"
          echo "coverage.out:"
          ls -la coverage.out || echo "coverage.out not found"
          echo "cover.out:"
          ls -la cover.out || echo "cover.out not found"
          
          echo ""
          echo "üìà Raw coverage data (first 10 lines):"
          head -10 coverage.out || echo "Cannot read coverage.out"
          
          echo ""
          echo "üìà Function coverage summary:"
          cat cover.out || echo "Cannot read cover.out"
          
          echo ""
          echo "üîç README badge section before update:"
          grep -A 2 -B 2 "coverage" README.md || echo "No coverage badge found in README.md"
          
          echo ""
          echo "üîç README changes after badge update:"
          git diff README.md || echo "No changes in README.md"

      - name: Commit changes
        if: github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      - name: Push changes
        if: github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git push origin HEAD:${{ github.ref_name }}

  coverage:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write
      pages: write
      id-token: write

    # –î–µ–ø–ª–æ–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy coverage report to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: Check deployment status
        if: steps.deployment.outcome == 'success'
        run: |
          echo "‚úÖ Coverage report successfully deployed to GitHub Pages"
          echo "üìä Report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Deployment failed notice
        if: steps.deployment.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è GitHub Pages deployment failed"
          echo "üìã Coverage report is available as an artifact: coverage-report"
          echo "üîß Possible solutions:"
          echo "   1. Check repository Settings > Pages > Source (should be 'GitHub Actions')"
          echo "   2. Verify environment protection rules allow this branch"
          echo "   3. Ensure repository has Pages enabled"
          echo "   4. Download artifacts to view coverage locally"

  # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫ –∏ pull request —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
  coverage-info:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è pull request –∏–ª–∏ –Ω–µ-main –≤–µ—Ç–æ–∫
    if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
    
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: Create simple HTML report
        run: |
          if [ -f coverage-report/cover.out ]; then
            echo "<!DOCTYPE html>" > coverage-report/simple-report.html
            echo "<html><head><title>Coverage Report</title>" >> coverage-report/simple-report.html
            echo "<style>body{font-family:Arial,sans-serif;margin:40px;} .coverage{background:#f5f5f5;padding:20px;border-radius:5px;}</style>" >> coverage-report/simple-report.html
            echo "</head><body>" >> coverage-report/simple-report.html
            echo "<h1>üìä Test Coverage Report</h1>" >> coverage-report/simple-report.html
            echo "<div class='coverage'>" >> coverage-report/simple-report.html
            echo "<h2>Coverage Summary:</h2>" >> coverage-report/simple-report.html
            echo "<pre>" >> coverage-report/simple-report.html
            cat coverage-report/cover.out >> coverage-report/simple-report.html
            echo "</pre>" >> coverage-report/simple-report.html
            echo "</div>" >> coverage-report/simple-report.html
            echo "<p><strong>Pull Request:</strong> #${{ github.event.pull_request.number }}</p>" >> coverage-report/simple-report.html
            echo "<p><strong>Branch:</strong> ${{ github.head_ref }}</p>" >> coverage-report/simple-report.html
            echo "<p><strong>Commit:</strong> ${{ github.sha }}</p>" >> coverage-report/simple-report.html
            echo "</body></html>" >> coverage-report/simple-report.html
          fi

      - name: Upload simple report
        uses: actions/upload-artifact@v4
        with:
          name: simple-coverage-report
          path: coverage-report/simple-report.html
          retention-days: 30

      - name: Coverage report info
        run: |
          echo "üìä Coverage report generated successfully"
          echo "üìã Report is available as an artifact: coverage-report"
          echo "üåê To view the report on GitHub Pages, merge this PR to main branch"
          echo "üìÅ You can download the artifact to view the report locally"
          echo ""
          echo "üìà Coverage summary:"
          if [ -f coverage-report/cover.out ]; then
            cat coverage-report/cover.out | tail -1
          else
            echo "Coverage summary not available"
          fi