name: Test Coverage

on:
  workflow_call:
    inputs:
      modules:
        required: true
        type: string
      go-version:
        required: true
        type: string
      golangci-lint-version:
        required: true
        type: string

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write
      pages: write

    steps:
      # tests
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: ${{ inputs.go-version }}

      - name: Verify dependencies
        run: go mod verify

      - name: Restore cache
        uses: actions/cache@v4.2.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-v1-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-v1-go-

      - name: Check and install dependencies
        run: |
          # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ go.mod —Ñ–∞–π–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º go mod tidy –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          find . -name "go.mod" -type f | while read -r modfile; do
            dir=$(dirname "$modfile")
            echo "Processing module in: $dir"
            cd "$dir"
            go mod tidy
            cd - > /dev/null
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ go.mod –∏ go.sum —Ñ–∞–π–ª–∞—Ö
          git diff --exit-code **/go.mod
          git diff --exit-code **/go.sum

      - name: Install gocov-html
        run: |
          go install github.com/axw/gocov/gocov@v1
          go install github.com/matm/gocov-html/cmd/gocov-html@v1

      - name: Run tests
        run: |
          mkdir -p .github_pages
          echo "mode: atomic" > coverage.out
          
          # –ù–∞–π–¥–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∏ —Å–æ–±–µ—Ä–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–∞–∫ –≤ test-coverage
          modules_with_tests=()
          coverage_files=()
          echo "üîç –ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π —Å internal –ø–∞–∫–µ—Ç–∞–º–∏..."
          
          for mod in ${{ inputs.modules }}; do
            if [ -d "$mod" ] && [ -f "$mod/go.mod" ]; then
              echo "üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥—É–ª—å $mod"
              cd "$mod"
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ internal –ø–∞–∫–µ—Ç–æ–≤
              if ! go list ./internal/... 2>/dev/null | grep -q .; then
                echo "‚ö†Ô∏è –í –º–æ–¥—É–ª–µ $mod –Ω–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ internal"
                cd ..
                continue
              fi
              
              # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º mocks –∏ test)
              TARGET_PACKAGES=$(go list ./internal/... 2>/dev/null | grep -v "/mocks" | grep -v "/test" | tr '\n' ',')
              
              if [ -n "$TARGET_PACKAGES" ]; then
                echo "üì¶ –ü–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤ $mod: $TARGET_PACKAGES"
                modules_with_tests+=("$mod")
                
                # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –∏–∑ TARGET_PACKAGES
                TARGET_PACKAGES=${TARGET_PACKAGES%,}
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è –º–æ–¥—É–ª—è
                COVERAGE_FILE="coverage_${mod}.out"
                
                echo "üîç –ó–∞–ø—É—Å–∫–∞–µ–º: go test -v -coverprofile=$COVERAGE_FILE -coverpkg=$TARGET_PACKAGES ./internal/..."
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –Ω–∞ internal –ø–∞–∫–µ—Ç—ã
                if go test -v -coverprofile="$COVERAGE_FILE" -coverpkg="$TARGET_PACKAGES" ./internal/... 2>/dev/null; then
                  if [ -f "$COVERAGE_FILE" ] && [ -s "$COVERAGE_FILE" ]; then
                    coverage_files+=("$COVERAGE_FILE")
                    echo "‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è $mod —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ $COVERAGE_FILE"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –º–æ–¥—É–ª—è
                    go tool cover -func="$COVERAGE_FILE" | tail -1
                  else
                    echo "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è –≤ –º–æ–¥—É–ª–µ $mod"
                    [ -f "$COVERAGE_FILE" ] && rm -f "$COVERAGE_FILE"
                  fi
                else
                  echo "‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –≤ –º–æ–¥—É–ª–µ $mod, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
                  [ -f "$COVERAGE_FILE" ] && rm -f "$COVERAGE_FILE"
                fi
              else
                echo "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ $mod"
              fi
              
              cd ..
            else
              echo "‚ö†Ô∏è –ú–æ–¥—É–ª—å $mod –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç go.mod"
            fi
          done
          
          echo "üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥—É–ª–µ–π —Å —Ç–µ—Å—Ç–∞–º–∏: ${#modules_with_tests[@]}"
          echo "üìã –ú–æ–¥—É–ª–∏: ${modules_with_tests[*]}"
          echo "üìÅ –§–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è: ${coverage_files[*]}"
          
          # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è
          if [ ${#coverage_files[@]} -gt 0 ]; then
            echo "üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è..."
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            TEMP_COVERAGE=$(mktemp)
            
            for file in "${coverage_files[@]}"; do
              echo "üîó –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: $file"
              if [ -f "$file" ] && [ -s "$file" ]; then
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (mode: atomic) –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                if [ -s "$TEMP_COVERAGE" ]; then
                  tail -n +2 "$file" >> "$TEMP_COVERAGE"
                else
                  cat "$file" >> "$TEMP_COVERAGE"
                fi
              fi
            done
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∏—Ç–æ–≥–æ–≤—ã–π
            mv "$TEMP_COVERAGE" coverage.out
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if [ -s coverage.out ]; then
              echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤..."
              (head -1 coverage.out; tail -n +2 coverage.out | sort -u) > coverage_clean.out
              mv coverage_clean.out coverage.out
            fi
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            if [ -s coverage.out ] && [ $(wc -l < coverage.out) -gt 1 ]; then
              echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."
              if go tool cover -func=coverage.out > cover.out 2>&1; then
                echo "‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
                echo "üìà –ò—Ç–æ–≥–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏:"
                tail -1 cover.out
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
                echo "üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞..."
                if gocov convert coverage.out | gocov-html > .github_pages/index.html 2>&1; then
                  echo "‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω"
                  
                  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ HTML –æ—Ç—á–µ—Ç—É –ø–æ–∫—Ä—ã—Ç–∏—è
                  sed -i '/<\/head>/i\
                  <style>\
                  .navigation {\
                    position: fixed;\
                    top: 10px;\
                    right: 10px;\
                    background: white;\
                    padding: 10px;\
                    border: 1px solid #ccc;\
                    border-radius: 5px;\
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\
                    z-index: 1000;\
                  }\
                  .nav-link {\
                    display: inline-block;\
                    margin: 0 5px;\
                    padding: 5px 10px;\
                    background: #f6f8fa;\
                    color: #24292f;\
                    text-decoration: none;\
                    border-radius: 3px;\
                    border: 1px solid #d1d9e0;\
                    font-size: 12px;\
                  }\
                  .nav-link:hover {\
                    background: #e1e4e8;\
                  }\
                  </style>' .github_pages/index.html
                  
                  sed -i '/<body>/a\
                  <div class="navigation">\
                    <a href="./" class="nav-link">üìä Coverage</a>\
                    <a href="./reports.html" class="nav-link">üìã All Reports</a>\
                  </div>' .github_pages/index.html
                else
                  echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞"
                  echo "<html><body><h1>Failed to generate coverage report</h1><p>Check logs for details</p></body></html>" > .github_pages/index.html
                fi
              else
                echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
                cat cover.out
                echo "total:                  (statements)   0.0%" > cover.out
                echo "<html><body><h1>Failed to generate coverage report</h1><p>Error generating function report</p></body></html>" > .github_pages/index.html
              fi
            else
              echo "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è"
              echo "total:                  (statements)   0.0%" > cover.out
              echo "<html><body><h1>No coverage data available</h1><p>No tests found or no coverage generated</p></body></html>" > .github_pages/index.html
            fi
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file in "${coverage_files[@]}"; do
              [ -f "$file" ] && rm -f "$file"
            done
          else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è"
            echo "total:                  (statements)   0.0%" > cover.out
            echo "<html><body><h1>No coverage files</h1><p>No coverage files were generated</p></body></html>" > .github_pages/index.html
          fi
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          echo "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
          echo "coverage.out —Ä–∞–∑–º–µ—Ä: $(ls -la coverage.out 2>/dev/null || echo '–Ω–µ –Ω–∞–π–¥–µ–Ω')"
          echo "cover.out —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
          cat cover.out 2>/dev/null || echo "cover.out –Ω–µ –Ω–∞–π–¥–µ–Ω"

      - name: üîó Create main reports index
        run: |
          echo "üîó –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç—á–µ—Ç–æ–≤..."
          
          # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –º–µ–∂–¥—É –æ—Ç—á–µ—Ç–∞–º–∏
          cat > .github_pages/reports.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ru">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>üìä Reports Dashboard</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif;
                      line-height: 1.6;
                      color: #24292f;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      background: #ffffff;
                  }
                  .header {
                      text-align: center;
                      padding: 20px 0;
                      border-bottom: 2px solid #e1e4e8;
                      margin-bottom: 30px;
                  }
                  .reports-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 20px;
                      margin: 30px 0;
                  }
                  .report-card {
                      background: #f6f8fa;
                      border: 1px solid #d1d9e0;
                      border-radius: 8px;
                      padding: 20px;
                      text-align: center;
                      transition: box-shadow 0.2s;
                  }
                  .report-card:hover {
                      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                  }
                  .report-link {
                      display: block;
                      color: #0969da;
                      text-decoration: none;
                      font-weight: 600;
                      font-size: 18px;
                      margin: 10px 0;
                  }
                  .report-link:hover {
                      text-decoration: underline;
                  }
                  .report-desc {
                      color: #656d76;
                      font-size: 14px;
                  }
                  .info {
                      background: #f0f9ff;
                      color: #0369a1;
                      padding: 12px 20px;
                      border-radius: 8px;
                      border: 1px solid #bae6fd;
                      margin: 20px 0;
                      text-align: center;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üìä MSA Rocket Factory - Reports Dashboard</h1>
              </div>
              
              <div class="info">
                  <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> $(date)<br>
                  <strong>Commit:</strong> ${{ github.sha }}<br>
                  <strong>Branch:</strong> ${{ github.ref_name }}
              </div>
              
              <div class="reports-grid">
                  <div class="report-card">
                      <h2>üìä</h2>
                      <a href="./" class="report-link">Coverage Report</a>
                      <p class="report-desc">–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ñ–∞–π–ª–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º</p>
                  </div>
                  
                  <div class="report-card">
                      <h2>üß™</h2>
                      <a href="./tests/" class="report-link">Test Report</a>
                      <p class="report-desc">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è unit —Ç–µ—Å—Ç–æ–≤ –ø–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞</p>
                  </div>
                  
                  <div class="report-card">
                      <h2>üîç</h2> 
                      <a href="./lint/" class="report-link">Lint Report</a>
                      <p class="report-desc">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é golangci-lint</p>
                  </div>
              </div>
              
              <div style="text-align: center; margin-top: 40px; color: #656d76;">
                  <p>üöÄ Generated by MSA Rocket Factory CI/CD Pipeline</p>
              </div>
          </body>
          </html>
          EOF
          
          echo "‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞"

      # pages
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload Artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .github_pages/

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            .github_pages/
            coverage.out
            cover.out
          retention-days: 30

      # badge - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏
      - name: Update coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: cover.out
          green: 80
          yellow: 60
          target: README.md

      - name: Verify Changed files
        if: github.ref == 'refs/heads/main'
        uses: tj-actions/verify-changed-files@v12
        id: verify-changed-files
        with:
          files: README.md

      - name: Debug coverage info
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üìä Coverage files info:"
          echo "coverage.out:"
          ls -la coverage.out || echo "coverage.out not found"
          echo "cover.out:"
          ls -la cover.out || echo "cover.out not found"
          
          echo ""
          echo "üìà Raw coverage data (first 10 lines):"
          head -10 coverage.out || echo "Cannot read coverage.out"
          
          echo ""
          echo "üìà Function coverage summary:"
          cat cover.out || echo "Cannot read cover.out"
          
          echo ""
          echo "üîç README badge section before update:"
          grep -A 2 -B 2 "coverage" README.md || echo "No coverage badge found in README.md"
          
          echo ""
          echo "üîç README changes after badge update:"
          git diff README.md || echo "No changes in README.md"

      - name: Commit changes
        if: github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      - name: Push changes
        if: github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git push origin HEAD:${{ github.ref_name }}

  coverage:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write
      pages: write
      id-token: write

    # –î–µ–ø–ª–æ–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy coverage report to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: Check deployment status
        if: steps.deployment.outcome == 'success'
        run: |
          echo "‚úÖ Coverage report successfully deployed to GitHub Pages"
          echo "üìä Report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Deployment failed notice
        if: steps.deployment.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è GitHub Pages deployment failed"
          echo "üìã Coverage report is available as an artifact: coverage-report"
          echo "üîß Possible solutions:"
          echo "   1. Check repository Settings > Pages > Source (should be 'GitHub Actions')"
          echo "   2. Verify environment protection rules allow this branch"
          echo "   3. Ensure repository has Pages enabled"
          echo "   4. Download artifacts to view coverage locally"

  # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫ –∏ pull request —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
  coverage-info:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è pull request –∏–ª–∏ –Ω–µ-main –≤–µ—Ç–æ–∫
    if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
    
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: Create simple HTML report
        run: |
          if [ -f coverage-report/cover.out ]; then
            echo "<!DOCTYPE html>" > coverage-report/simple-report.html
            echo "<html><head><title>Coverage Report</title>" >> coverage-report/simple-report.html
            echo "<style>body{font-family:Arial,sans-serif;margin:40px;} .coverage{background:#f5f5f5;padding:20px;border-radius:5px;}</style>" >> coverage-report/simple-report.html
            echo "</head><body>" >> coverage-report/simple-report.html
            echo "<h1>üìä Test Coverage Report</h1>" >> coverage-report/simple-report.html
            echo "<div class='coverage'>" >> coverage-report/simple-report.html
            echo "<h2>Coverage Summary:</h2>" >> coverage-report/simple-report.html
            echo "<pre>" >> coverage-report/simple-report.html
            cat coverage-report/cover.out >> coverage-report/simple-report.html
            echo "</pre>" >> coverage-report/simple-report.html
            echo "</div>" >> coverage-report/simple-report.html
            echo "<p><strong>Pull Request:</strong> #${{ github.event.pull_request.number }}</p>" >> coverage-report/simple-report.html
            echo "<p><strong>Branch:</strong> ${{ github.head_ref }}</p>" >> coverage-report/simple-report.html
            echo "<p><strong>Commit:</strong> ${{ github.sha }}</p>" >> coverage-report/simple-report.html
            echo "</body></html>" >> coverage-report/simple-report.html
          fi

      - name: Upload simple report
        uses: actions/upload-artifact@v4
        with:
          name: simple-coverage-report
          path: coverage-report/simple-report.html
          retention-days: 30

      - name: Coverage report info
        run: |
          echo "üìä Coverage report generated successfully"
          echo "üìã Report is available as an artifact: coverage-report"
          echo "üåê To view the report on GitHub Pages, merge this PR to main branch"
          echo "üìÅ You can download the artifact to view the report locally"
          echo ""
          echo "üìà Coverage summary:"
          if [ -f coverage-report/cover.out ]; then
            cat coverage-report/cover.out | tail -1
          else
            echo "Coverage summary not available"
          fi