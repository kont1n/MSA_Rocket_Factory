name: Test Coverage

on:
  workflow_call:
    inputs:
      modules:
        required: true
        type: string
      go-version:
        required: true
        type: string
      golangci-lint-version:
        required: true
        type: string

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write
      pages: write

    steps:
      # tests
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: ${{ inputs.go-version }}

      - name: Verify dependencies
        run: go mod verify

      - name: Restore cache
        uses: actions/cache@v4.2.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-v1-go-${{ hashFiles('**/go.sum', 'go.work.sum') }}
          restore-keys: |
            ${{ runner.os }}-v1-go-

      - name: Check and install dependencies
        run: |
          # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ go.mod —Ñ–∞–π–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º go mod tidy –≤ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          find . -name "go.mod" -type f | while read -r modfile; do
            dir=$(dirname "$modfile")
            echo "Processing module in: $dir"
            cd "$dir"
            go mod tidy
            cd - > /dev/null
          done
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ go.mod –∏ go.sum —Ñ–∞–π–ª–∞—Ö
          git diff --exit-code **/go.mod
          git diff --exit-code **/go.sum

      - name: Install gocov-html
        run: |
          go install github.com/axw/gocov/gocov@v1
          go install github.com/matm/gocov-html/cmd/gocov-html@v1

      - name: Run tests
        run: |
          mkdir -p .github_pages
          
          # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª –ø–æ–∫—Ä—ã—Ç–∏—è
          echo "mode: atomic" > coverage.out
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          while IFS= read -r modfile; do
            dir=$(dirname "$modfile")
            echo "Running tests in: $dir"
            cd "$dir"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
            go test ./... -coverprofile=tmp_coverage.out -covermode=atomic -coverpkg=./...
            if [ -f tmp_coverage.out ]; then
              # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (mode: atomic) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
              awk 'NR>1' tmp_coverage.out >> ../../coverage.out
              rm tmp_coverage.out
            fi
            
            cd - > /dev/null
          done < <(find . -name "go.mod" -type f)
          
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
          go tool cover -func=coverage.out -o=cover.out
          gocov convert coverage.out | gocov-html > .github_pages/index.html

      # pages
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          enablement: true

      - name: Upload Artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .github_pages/

      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            .github_pages/
            coverage.out
            cover.out
          retention-days: 30

      # badge - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏
      - name: Update coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: tj-actions/coverage-badge-go@v2
        with:
          text: Coverage_Report
          target: README.md
          filename: cover.out
          link: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
        continue-on-error: true

      - name: Verify Changed files
        if: github.ref == 'refs/heads/main'
        uses: tj-actions/verify-changed-files@v12
        id: verify-changed-files
        with:
          files: README.md

      - name: Commit changes
        if: github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      - name: Push changes
        if: github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
          git push origin HEAD:${{ github.ref_name }}

  coverage:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: write
      pages: write
      id-token: write

    # –î–µ–ø–ª–æ–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy coverage report to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: Check deployment status
        if: steps.deployment.outcome == 'success'
        run: |
          echo "‚úÖ Coverage report successfully deployed to GitHub Pages"
          echo "üìä Report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Deployment failed notice
        if: steps.deployment.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è GitHub Pages deployment failed"
          echo "üìã Coverage report is available as an artifact: coverage-report"
          echo "üîß Possible solutions:"
          echo "   1. Check repository Settings > Pages > Source (should be 'GitHub Actions')"
          echo "   2. Verify environment protection rules allow this branch"
          echo "   3. Ensure repository has Pages enabled"
          echo "   4. Download artifacts to view coverage locally"

  # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫ –∏ pull request —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
  coverage-info:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è pull request –∏–ª–∏ –Ω–µ-main –≤–µ—Ç–æ–∫
    if: github.event_name == 'pull_request' || github.ref != 'refs/heads/main'
    
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: Create simple HTML report
        run: |
          if [ -f coverage-report/cover.out ]; then
            echo "<!DOCTYPE html>" > coverage-report/simple-report.html
            echo "<html><head><title>Coverage Report</title>" >> coverage-report/simple-report.html
            echo "<style>body{font-family:Arial,sans-serif;margin:40px;} .coverage{background:#f5f5f5;padding:20px;border-radius:5px;}</style>" >> coverage-report/simple-report.html
            echo "</head><body>" >> coverage-report/simple-report.html
            echo "<h1>üìä Test Coverage Report</h1>" >> coverage-report/simple-report.html
            echo "<div class='coverage'>" >> coverage-report/simple-report.html
            echo "<h2>Coverage Summary:</h2>" >> coverage-report/simple-report.html
            echo "<pre>" >> coverage-report/simple-report.html
            cat coverage-report/cover.out >> coverage-report/simple-report.html
            echo "</pre>" >> coverage-report/simple-report.html
            echo "</div>" >> coverage-report/simple-report.html
            echo "<p><strong>Pull Request:</strong> #${{ github.event.pull_request.number }}</p>" >> coverage-report/simple-report.html
            echo "<p><strong>Branch:</strong> ${{ github.head_ref }}</p>" >> coverage-report/simple-report.html
            echo "<p><strong>Commit:</strong> ${{ github.sha }}</p>" >> coverage-report/simple-report.html
            echo "</body></html>" >> coverage-report/simple-report.html
          fi

      - name: Upload simple report
        uses: actions/upload-artifact@v4
        with:
          name: simple-coverage-report
          path: coverage-report/simple-report.html
          retention-days: 30

      - name: Coverage report info
        run: |
          echo "üìä Coverage report generated successfully"
          echo "üìã Report is available as an artifact: coverage-report"
          echo "üåê To view the report on GitHub Pages, merge this PR to main branch"
          echo "üìÅ You can download the artifact to view the report locally"
          echo ""
          echo "üìà Coverage summary:"
          if [ -f coverage-report/cover.out ]; then
            cat coverage-report/cover.out | tail -1
          else
            echo "Coverage summary not available"
          fi