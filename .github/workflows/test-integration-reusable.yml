name: Run Integration Tests

on:
  workflow_call:
    inputs:
      modules:
        required: true
        type: string
      go-version:
        required: true
        type: string

jobs:
  integration-test:
    name: Run integration tests
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4.2.2

      - name: üõ† Set up Go
        uses: actions/setup-go@v5.4.0
        with:
          go-version: ${{ inputs.go-version }}
          cache: false

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üß© Set up Docker cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: üìå Install Task
        uses: arduino/setup-task@v2.0.0

      - name: üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        env:
          # PostgreSQL environment variables for tests
          POSTGRES_IMAGE_NAME: postgres:17.0-alpine3.20
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: order-service
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          HTTP_PORT: 8081
          # MongoDB environment variables for tests
          MONGO_IMAGE_NAME: mongo:7.0.5
          MONGO_HOST: mongo
          MONGO_PORT: 27017
          MONGO_DATABASE: inventory-service
          MONGO_INITDB_ROOT_USERNAME: inventory-service-user
          MONGO_INITDB_ROOT_PASSWORD: inventory-service-password
          GRPC_PORT: 50051
        run: |
          echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
          echo "üêò PostgreSQL: $POSTGRES_IMAGE_NAME –Ω–∞ $POSTGRES_HOST:$POSTGRES_PORT"
          echo "üçÉ MongoDB: $MONGO_IMAGE_NAME –Ω–∞ $MONGO_HOST:$MONGO_PORT"
          echo "üîß –ü–æ—Ä—Ç—ã: HTTP=$HTTP_PORT, gRPC=$GRPC_PORT"
          echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"

      - name: üß™ Run integration tests via Taskfile
        env:
          MODULES: ${{ inputs.modules }}
          # PostgreSQL environment variables for tests
          POSTGRES_IMAGE_NAME: postgres:17.0-alpine3.20
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: order-service
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          HTTP_PORT: 8081
          # MongoDB environment variables for tests
          MONGO_IMAGE_NAME: mongo:7.0.5
          MONGO_HOST: mongo
          MONGO_PORT: 27017
          MONGO_DATABASE: inventory-service
          MONGO_INITDB_ROOT_USERNAME: inventory-service-user
          MONGO_INITDB_ROOT_PASSWORD: inventory-service-password
          GRPC_PORT: 50051
        run: |
          echo "üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
          echo "üìã –ú–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${{ inputs.modules }}"
          echo "üêπ –í–µ—Ä—Å–∏—è Go: ${{ inputs.go-version }}"
          echo "üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üñ•Ô∏è Runner: ${{ runner.os }}"
          echo ""
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Docker
          echo "üê≥ Docker –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
          docker --version
          docker-compose --version
          echo ""
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
          echo "üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏:"
          docker ps -a || echo "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
          echo ""
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: task test-integration"
          echo "========================================"
          
          set +e  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          task test-integration
          TEST_EXIT_CODE=$?
          set -e
          
          echo "========================================"
          echo "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
          echo "üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $TEST_EXIT_CODE"
          echo "üïí –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
          echo ""
          echo "üì¶ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤:"
          docker ps -a || echo "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo ""
            echo "‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò –í –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–ê–•"
            echo "üîç –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
            echo ""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üìã –õ–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            for container in $(docker ps -aq 2>/dev/null || echo ""); do
              if [ ! -z "$container" ]; then
                container_name=$(docker inspect --format='{{.Name}}' $container 2>/dev/null | sed 's/\///' || echo "unknown")
                echo "--- –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_name ($container) ---"
                docker logs --tail=50 $container 2>&1 || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container"
                echo ""
              fi
            done
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏ Docker
            echo "üåê Docker —Å–µ—Ç–∏:"
            docker network ls || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç—è—Ö"
            echo ""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
            df -h || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"
            free -h || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"
            echo ""
          else
            echo "‚úÖ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û"
          fi
          
          echo "========================================"
          exit $TEST_EXIT_CODE

      - name: üßπ Cleanup Docker containers
        if: always()
        run: |
          echo "üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
          echo "üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∫–∏: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
          echo ""
          echo "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:"
          docker ps -a 2>/dev/null || echo "Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
          
          echo ""
          echo "üñºÔ∏è –û–±—Ä–∞–∑—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:"
          docker images 2>/dev/null || echo "Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
          echo ""
          echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
          docker container prune -f 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
          
          echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã..."
          docker image prune -f 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –æ–±—Ä–∞–∑–æ–≤"
          
          echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏..."
          docker network prune -f 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–µ—Ç–µ–π"
          
          echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–º–∞..."
          docker volume prune -f 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Ç–æ–º–æ–≤"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
          echo ""
          echo "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
          docker ps -a 2>/dev/null || echo "Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
          
          echo ""
          echo "üñºÔ∏è –û–±—Ä–∞–∑—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
          docker images 2>/dev/null || echo "Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
          
          echo ""
          echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
          echo "üïí –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date '+%Y-%m-%d %H:%M:%S UTC')"