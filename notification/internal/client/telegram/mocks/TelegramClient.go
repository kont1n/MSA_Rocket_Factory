// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TelegramClient is an autogenerated mock type for the TelegramClient type
type TelegramClient struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *TelegramClient) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: ctx, chatID, message
func (_m *TelegramClient) SendMessage(ctx context.Context, chatID int64, message string) error {
	ret := _m.Called(ctx, chatID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, chatID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *TelegramClient) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserRegistrationCallback provides a mock function with given fields: callback
func (_m *TelegramClient) SetUserRegistrationCallback(callback func(ctx context.Context, username string, chatID int64) error) {
	_m.Called(callback)
}

// HandleStartCommand provides a mock function with given fields: ctx, username, chatID
func (_m *TelegramClient) HandleStartCommand(ctx context.Context, username string, chatID int64) error {
	ret := _m.Called(ctx, username, chatID)

	if len(ret) == 0 {
		panic("no return value specified for HandleStartCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, username, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTelegramClient creates a new instance of TelegramClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramClient {
	mock := &TelegramClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
