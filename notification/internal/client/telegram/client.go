package telegram

import (
	"context"
	"fmt"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"go.uber.org/zap"

	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/config"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/logger"
)

type client struct {
	bot                      *bot.Bot
	chatID                   int64
	userRegistrationCallback func(ctx context.Context, username string, chatID int64) error
}

type noopClient struct {
	chatID                   int64
	userRegistrationCallback func(ctx context.Context, username string, chatID int64) error
	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è /start
	lastStartMessage string
}

func (c *client) startHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if c.userRegistrationCallback != nil {
		username := update.Message.From.Username
		if username == "" {
			username = fmt.Sprintf("user_%d", update.Message.From.ID)
		}

		err := c.userRegistrationCallback(ctx, username, update.Message.Chat.ID)
		if err != nil {
			logger.Error(ctx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram",
				zap.Error(err),
				zap.String("username", username),
				zap.Int64("chat_id", update.Message.Chat.ID))
		}
	}

	message := "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rocket Factory!\n\n" +
		"–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ —Å–±–æ—Ä–∫–∏ —Ä–∞–∫–µ—Ç.\n" +
		"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n" +
		"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n" +
		"‚Ä¢ –°–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª—è—Ö\n" +
		"‚Ä¢ –î—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\n" +
		"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   message,
	})
	if err != nil {
		logger.Error(ctx, "Failed to send start command response",
			zap.Error(err),
			zap.Int64("chat_id", update.Message.Chat.ID))
	}
}

func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start
}

func NewClient(ctx context.Context, cfg config.TelegramConfig) (TelegramClient, error) {
	if cfg.SkipAPICheck() {
		logger.Info(ctx, "Telegram API check skipped - using noop client for development")
		return &noopClient{}, nil
	}

	token := cfg.BotToken()
	if token == "" {
		return nil, fmt.Errorf("telegram bot token is empty")
	}

	token = strings.TrimSpace(token)

	if !strings.Contains(token, ":") {
		return nil, fmt.Errorf("invalid telegram bot token format: must contain ':'")
	}

	b, err := bot.New(token, bot.WithDefaultHandler(defaultHandler))
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}

	reportBot := &client{
		bot: b,
	}

	b.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeExact, reportBot.startHandler)

	me, err := b.GetMe(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to telegram API: %w", err)
	}

	logger.Info(ctx, "Telegram bot connected successfully",
		zap.String("bot_username", me.Username),
		zap.Int64("bot_id", me.ID))

	return reportBot, nil
}

func (c *client) Start(ctx context.Context) error {
	go func() {
		c.bot.Start(ctx)
	}()

	return nil
}

func (c *client) SendMessage(ctx context.Context, chatID int64, message string) error {
	targetChatID := chatID
	if targetChatID == 0 {
		targetChatID = c.chatID
	}

	_, err := c.bot.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: targetChatID,
		Text:   message,
	})
	if err != nil {
		return fmt.Errorf("failed to send telegram message: %w", err)
	}

	return nil
}

func (c *client) Close(ctx context.Context) error {
	if c.bot != nil {
		_, err := c.bot.Close(ctx)
		if err != nil {
			logger.Error(ctx, "Failed to close telegram bot", zap.Error(err))
		}
	}
	return nil
}

func (c *client) SetUserRegistrationCallback(callback func(ctx context.Context, username string, chatID int64) error) {
	c.userRegistrationCallback = callback
}

// HandleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º)
func (c *client) HandleStartCommand(ctx context.Context, username string, chatID int64) error {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ –∫–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ startHandler
	// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
	return nil
}

// noopClient –º–µ—Ç–æ–¥—ã

func (n *noopClient) SetUserRegistrationCallback(callback func(ctx context.Context, username string, chatID int64) error) {
	n.userRegistrationCallback = callback
}

func (n *noopClient) Start(ctx context.Context) error {
	logger.Info(ctx, "Development mode: Telegram bot started (simulated)")

	// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
	go func() {
		<-ctx.Done()
		logger.Info(ctx, "Development mode: Telegram bot stopped")
	}()

	return nil
}

func (n *noopClient) SendMessage(ctx context.Context, chatID int64, message string) error {
	targetChatID := chatID
	if targetChatID == 0 {
		targetChatID = n.chatID
	}

	logger.Info(ctx, "Development mode: Telegram message simulated",
		zap.Int64("chat_id", targetChatID),
		zap.String("message", message))
	return nil
}

func (n *noopClient) Close(ctx context.Context) error {
	logger.Info(ctx, "Development mode: Telegram client close skipped")
	return nil
}

// HandleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
func (n *noopClient) HandleStartCommand(ctx context.Context, username string, chatID int64) error {
	logger.Info(ctx, "Development mode: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start",
		zap.String("username", username),
		zap.Int64("chat_id", chatID))

	// –ï—Å–ª–∏ –µ—Å—Ç—å callback –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
	if n.userRegistrationCallback != nil {
		err := n.userRegistrationCallback(ctx, username, chatID)
		if err != nil {
			logger.Error(ctx, "Development mode: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				zap.Error(err),
				zap.String("username", username),
				zap.Int64("chat_id", chatID))
			return err
		}
		logger.Info(ctx, "Development mode: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
			zap.String("username", username),
			zap.Int64("chat_id", chatID))
	} else {
		logger.Warn(ctx, "Development mode: Callback –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	n.lastStartMessage = fmt.Sprintf("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rocket Factory! (Development mode)\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\nChat ID: %d", username, chatID)

	return nil
}
