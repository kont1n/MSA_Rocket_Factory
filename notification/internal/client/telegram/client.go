package telegram

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"go.uber.org/zap"

	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/config"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/logger"
)

// client —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
type client struct {
	bot    *bot.Bot
	chatID int64
}

// startCommandHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (c *client) startHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	message := "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rocket Factory!\n\n" +
		"–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ —Å–±–æ—Ä–∫–∏ —Ä–∞–∫–µ—Ç.\n" +
		"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n" +
		"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n" +
		"‚Ä¢ –°–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª—è—Ö\n" +
		"‚Ä¢ –î—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\n" +
		"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   message,
	})
	if err != nil {
		logger.Error(ctx, "Failed to send start command response",
			zap.Error(err),
			zap.Int64("chat_id", update.Message.Chat.ID))
	}
}

// defaultHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start
	// –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
}

// NewClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Telegram –∫–ª–∏–µ–Ω—Ç
func NewClient(ctx context.Context, cfg config.TelegramConfig) (*client, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
	token := cfg.BotToken()
	if token == "" {
		return nil, fmt.Errorf("telegram bot token is empty")
	}

	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	token = strings.TrimSpace(token)

	// –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
	if !strings.Contains(token, ":") {
		return nil, fmt.Errorf("invalid telegram bot token format: must contain ':'")
	}

	b, err := bot.New(token, bot.WithDefaultHandler(defaultHandler))
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}

	reportBot := &client{
		bot: b,
	}

	b.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypeExact, reportBot.startHandler)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ
	if !cfg.SkipAPICheck() {
		me, err := b.GetMe(ctx)
		if err != nil {
			return nil, fmt.Errorf("failed to connect to telegram API: %w", err)
		}

		logger.Info(ctx, "Telegram bot connected successfully",
			zap.String("bot_username", me.Username),
			zap.Int64("bot_id", me.ID))
	} else {
		logger.Info(ctx, "Telegram bot created (API check skipped)")
	}

	// –ü–∞—Ä—Å–∏–º ChatID
	chatID, err := strconv.ParseInt(cfg.ChatID(), 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid chat ID format: %w", err)
	}

	logger.Info(ctx, "Telegram bot configured",
		zap.Int64("chat_id", chatID))

	return &client{
		bot:    b,
		chatID: chatID,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
func (c *client) Start(ctx context.Context) error {
	logger.Info(ctx, "Starting Telegram bot...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		c.bot.Start(ctx)
	}()

	logger.Info(ctx, "Telegram bot started successfully")
	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
func (c *client) SendMessage(ctx context.Context, chatID int64, message string) error {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π chatID –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	targetChatID := chatID
	if targetChatID == 0 {
		targetChatID = c.chatID
	}

	_, err := c.bot.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: targetChatID,
		Text:   message,
	})
	if err != nil {
		return fmt.Errorf("failed to send telegram message: %w", err)
	}

	logger.Info(ctx, "Telegram message sent successfully",
		zap.Int64("chat_id", targetChatID))

	return nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç
func (c *client) Close(ctx context.Context) error {
	if c.bot != nil {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ cleanup –æ–ø–µ—Ä–∞—Ü–∏—è
		//nolint:gosec // –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è cleanup
		_, _ = c.bot.Close(ctx)
	}
	return nil
}
