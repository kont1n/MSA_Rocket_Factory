// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/kont1n/MSA_Rocket_Factory/platform/pkg/kafka"
	mock "github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// Consume provides a mock function with given fields: ctx, handler
func (_m *Consumer) Consume(ctx context.Context, handler kafka.MessageHandler) error {
	ret := _m.Called(ctx, handler)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kafka.MessageHandler) error); ok {
		r0 = rf(ctx, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
