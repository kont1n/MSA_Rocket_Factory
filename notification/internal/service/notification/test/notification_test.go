package notification_test

import (
	"context"
	"errors"
	"strings"

	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"

	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/model"
)

func (s *NotificationServiceSuite) TestNotifyOrderPaid_Success() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.New(),
		OrderUUID:       uuid.New(),
		UserUUID:        uuid.New(),
		PaymentMethod:   "card",
		TransactionUUID: uuid.New(),
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	s.telegramClient.On("SendMessage", mock.Anything, int64(0), mock.AnythingOfType("string")).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyOrderPaid_TelegramError() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.New(),
		OrderUUID:       uuid.New(),
		UserUUID:        uuid.New(),
		PaymentMethod:   "card",
		TransactionUUID: uuid.New(),
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
	expectedError := errors.New("telegram error")
	s.telegramClient.On("SendMessage", mock.Anything, int64(0), mock.AnythingOfType("string")).Return(expectedError)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.Error(err)
	s.Contains(err.Error(), "failed to send notification")
	s.telegramClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyShipAssembled_Success() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.ShipAssembledEvent{
		EventUUID: uuid.New(),
		OrderUUID: uuid.New(),
		UserUUID:  uuid.New(),
		BuildTime: 120,
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	s.telegramClient.On("SendMessage", mock.Anything, int64(0), mock.AnythingOfType("string")).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyShipAssembled(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyShipAssembled_TelegramError() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.ShipAssembledEvent{
		EventUUID: uuid.New(),
		OrderUUID: uuid.New(),
		UserUUID:  uuid.New(),
		BuildTime: 120,
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
	expectedError := errors.New("telegram error")
	s.telegramClient.On("SendMessage", mock.Anything, int64(0), mock.AnythingOfType("string")).Return(expectedError)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyShipAssembled(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.Error(err)
	s.Contains(err.Error(), "failed to send notification")
	s.telegramClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyOrderPaid_MessageFormat() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.MustParse("550e8400-e29b-41d4-a716-446655440000"),
		OrderUUID:       uuid.MustParse("550e8400-e29b-41d4-a716-446655440001"),
		UserUUID:        uuid.MustParse("550e8400-e29b-41d4-a716-446655440002"),
		PaymentMethod:   "card",
		TransactionUUID: uuid.MustParse("550e8400-e29b-41d4-a716-446655440003"),
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	s.telegramClient.On("SendMessage", mock.Anything, int64(0), mock.MatchedBy(func(message string) bool {
		return strings.Contains(message, "üéâ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440001") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440002") &&
			strings.Contains(message, "card") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440003")
	})).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyShipAssembled_MessageFormat() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.ShipAssembledEvent{
		EventUUID: uuid.MustParse("550e8400-e29b-41d4-a716-446655440000"),
		OrderUUID: uuid.MustParse("550e8400-e29b-41d4-a716-446655440001"),
		UserUUID:  uuid.MustParse("550e8400-e29b-41d4-a716-446655440002"),
		BuildTime: 120,
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	s.telegramClient.On("SendMessage", mock.Anything, int64(0), mock.MatchedBy(func(message string) bool {
		return strings.Contains(message, "üöÄ –ö–æ—Ä–∞–±–ª—å —Å–æ–±—Ä–∞–Ω!") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440001") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440002") &&
			strings.Contains(message, "120")
	})).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyShipAssembled(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
}
