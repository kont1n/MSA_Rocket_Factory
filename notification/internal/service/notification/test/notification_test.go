package notification_test

import (
	"context"
	"errors"
	"strconv"
	"strings"

	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"

	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/model"
	iamV1 "github.com/kont1n/MSA_Rocket_Factory/shared/pkg/proto/iam/v1"
)

// createMockUser —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram –º–µ—Ç–æ–¥–æ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
func (s *NotificationServiceSuite) createMockUser(userUUID string, chatID int64) *iamV1.User {
	return &iamV1.User{
		Uuid: userUUID,
		Info: &iamV1.UserInfo{
			Login: "testuser",
			Email: "test@example.com",
			NotificationMethods: []*iamV1.NotificationMethod{
				{
					ProviderName: "telegram",
					Target:       strconv.FormatInt(chatID, 10),
				},
			},
		},
	}
}

func (s *NotificationServiceSuite) TestNotifyOrderPaid_Success() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.New(),
		OrderUUID:       uuid.New(),
		UserUUID:        uuid.New(),
		PaymentMethod:   "card",
		TransactionUUID: uuid.New(),
	}

	expectedChatID := int64(12345)

	// –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM
	mockUser := s.createMockUser(event.UserUUID.String(), expectedChatID)
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(mockUser, nil)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	s.telegramClient.On("SendMessage", mock.Anything, expectedChatID, mock.AnythingOfType("string")).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
	s.iamClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyOrderPaid_TelegramError() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.New(),
		OrderUUID:       uuid.New(),
		UserUUID:        uuid.New(),
		PaymentMethod:   "card",
		TransactionUUID: uuid.New(),
	}

	expectedChatID := int64(12345)

	// –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM
	mockUser := s.createMockUser(event.UserUUID.String(), expectedChatID)
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(mockUser, nil)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
	expectedError := errors.New("telegram error")
	s.telegramClient.On("SendMessage", mock.Anything, expectedChatID, mock.AnythingOfType("string")).Return(expectedError)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.Error(err)
	s.Contains(err.Error(), "failed to send notification")
	s.telegramClient.AssertExpectations(s.T())
	s.iamClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyShipAssembled_Success() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.ShipAssembledEvent{
		EventUUID: uuid.New(),
		OrderUUID: uuid.New(),
		UserUUID:  uuid.New(),
		BuildTime: 120,
	}

	expectedChatID := int64(67890)

	// –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM
	mockUser := s.createMockUser(event.UserUUID.String(), expectedChatID)
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(mockUser, nil)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	s.telegramClient.On("SendMessage", mock.Anything, expectedChatID, mock.AnythingOfType("string")).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyShipAssembled(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
	s.iamClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyShipAssembled_TelegramError() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.ShipAssembledEvent{
		EventUUID: uuid.New(),
		OrderUUID: uuid.New(),
		UserUUID:  uuid.New(),
		BuildTime: 120,
	}

	expectedChatID := int64(67890)

	// –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM
	mockUser := s.createMockUser(event.UserUUID.String(), expectedChatID)
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(mockUser, nil)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
	expectedError := errors.New("telegram error")
	s.telegramClient.On("SendMessage", mock.Anything, expectedChatID, mock.AnythingOfType("string")).Return(expectedError)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyShipAssembled(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.Error(err)
	s.Contains(err.Error(), "failed to send notification")
	s.telegramClient.AssertExpectations(s.T())
	s.iamClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyOrderPaid_MessageFormat() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.MustParse("550e8400-e29b-41d4-a716-446655440000"),
		OrderUUID:       uuid.MustParse("550e8400-e29b-41d4-a716-446655440001"),
		UserUUID:        uuid.MustParse("550e8400-e29b-41d4-a716-446655440002"),
		PaymentMethod:   "card",
		TransactionUUID: uuid.MustParse("550e8400-e29b-41d4-a716-446655440003"),
	}

	expectedChatID := int64(11111)

	// –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM
	mockUser := s.createMockUser(event.UserUUID.String(), expectedChatID)
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(mockUser, nil)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	s.telegramClient.On("SendMessage", mock.Anything, expectedChatID, mock.MatchedBy(func(message string) bool {
		return strings.Contains(message, "üéâ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440001") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440002") &&
			strings.Contains(message, "card") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440003")
	})).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
	s.iamClient.AssertExpectations(s.T())
}

func (s *NotificationServiceSuite) TestNotifyShipAssembled_MessageFormat() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.ShipAssembledEvent{
		EventUUID: uuid.MustParse("550e8400-e29b-41d4-a716-446655440000"),
		OrderUUID: uuid.MustParse("550e8400-e29b-41d4-a716-446655440001"),
		UserUUID:  uuid.MustParse("550e8400-e29b-41d4-a716-446655440002"),
		BuildTime: 120,
	}

	expectedChatID := int64(22222)

	// –ú–æ–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM
	mockUser := s.createMockUser(event.UserUUID.String(), expectedChatID)
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(mockUser, nil)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	s.telegramClient.On("SendMessage", mock.Anything, expectedChatID, mock.MatchedBy(func(message string) bool {
		return strings.Contains(message, "üöÄ –ö–æ—Ä–∞–±–ª—å —Å–æ–±—Ä–∞–Ω!") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440001") &&
			strings.Contains(message, "550e8400-e29b-41d4-a716-446655440002") &&
			strings.Contains(message, "120")
	})).Return(nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyShipAssembled(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.NoError(err)
	s.telegramClient.AssertExpectations(s.T())
	s.iamClient.AssertExpectations(s.T())
}

// TestNotifyOrderPaid_IAMError —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM
func (s *NotificationServiceSuite) TestNotifyOrderPaid_IAMError() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.New(),
		OrderUUID:       uuid.New(),
		UserUUID:        uuid.New(),
		PaymentMethod:   "card",
		TransactionUUID: uuid.New(),
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏ IAM
	expectedError := errors.New("iam service error")
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(nil, expectedError)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.Error(err)
	s.Contains(err.Error(), "failed to get telegram chatID")
	s.iamClient.AssertExpectations(s.T())
}

// TestNotifyOrderPaid_NoTelegramMethod —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è telegram –º–µ—Ç–æ–¥–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
func (s *NotificationServiceSuite) TestNotifyOrderPaid_NoTelegramMethod() {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	event := &model.OrderPaidEvent{
		EventUUID:       uuid.New(),
		OrderUUID:       uuid.New(),
		UserUUID:        uuid.New(),
		PaymentMethod:   "card",
		TransactionUUID: uuid.New(),
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ telegram –º–µ—Ç–æ–¥–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
	mockUser := &iamV1.User{
		Uuid: event.UserUUID.String(),
		Info: &iamV1.UserInfo{
			Login: "testuser",
			Email: "test@example.com",
			NotificationMethods: []*iamV1.NotificationMethod{
				{
					ProviderName: "email",
					Target:       "test@example.com",
				},
			},
		},
	}
	s.iamClient.On("GetUser", mock.Anything, event.UserUUID.String()).Return(mockUser, nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
	err := s.service.NotifyOrderPaid(context.Background(), event)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	s.Error(err)
	s.Contains(err.Error(), "telegram notification method not found")
	s.iamClient.AssertExpectations(s.T())
}
