package notification

import (
	"context"
	"fmt"
	"strconv"

	"go.uber.org/zap"

	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/client/iam"
	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/client/telegram"
	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/model"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/logger"
)

type service struct {
	telegramClient telegram.TelegramClient
	iamClient      iam.Client
}

func NewService(ctx context.Context, telegramClient telegram.TelegramClient, iamClient iam.Client) *service {
	svc := &service{
		telegramClient: telegramClient,
		iamClient:      iamClient,
	}

	logger.Info(ctx, "–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω",
		zap.Bool("iam_client_available", iamClient != nil))

	return svc
}

func (s *service) getTelegramChatID(ctx context.Context, userUUID string) (int64, error) {
	user, err := s.iamClient.GetUser(ctx, userUUID)
	if err != nil {
		logger.Error(ctx, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ IAM",
			zap.Error(err), zap.String("user_uuid", userUUID))
		return 0, fmt.Errorf("failed to get user from IAM: %w", err)
	}

	if user.GetInfo() == nil {
		logger.Error(ctx, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
			zap.String("user_uuid", userUUID))
		return 0, fmt.Errorf("user info is nil")
	}

	notificationMethods := user.GetInfo().GetNotificationMethods()
	for _, method := range notificationMethods {
		if method.GetProviderName() == "telegram" {
			chatID, err := strconv.ParseInt(method.GetTarget(), 10, 64)
			if err != nil {
				logger.Error(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å telegram target –≤ chatID",
					zap.Error(err),
					zap.String("user_uuid", userUUID),
					zap.String("target", method.GetTarget()))
				return 0, fmt.Errorf("failed to parse telegram chatID: %w", err)
			}

			return chatID, nil
		}
	}

	logger.Warn(ctx, "Telegram –º–µ—Ç–æ–¥ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		zap.String("user_uuid", userUUID))
	return 0, fmt.Errorf("telegram notification method not found for user %s", userUUID)
}

func (s *service) NotifyOrderPaid(ctx context.Context, event *model.OrderPaidEvent) error {
	chatID, err := s.getTelegramChatID(ctx, event.UserUUID.String())
	if err != nil {
		logger.Error(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram chatID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			zap.Error(err),
			zap.String("user_uuid", event.UserUUID.String()))
		return fmt.Errorf("failed to get telegram chatID: %w", err)
	}

	message := fmt.Sprintf(
		"üéâ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!\n"+
			"üì¶ ID –∑–∞–∫–∞–∑–∞: %s\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n"+
			"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: %s\n"+
			"üîë –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: %s",
		event.OrderUUID.String(),
		event.UserUUID.String(),
		event.PaymentMethod,
		event.TransactionUUID.String(),
	)

	err = s.telegramClient.SendMessage(ctx, chatID, message)
	if err != nil {
		logger.Error(ctx, "Failed to send OrderPaid notification", zap.Error(err))
		return fmt.Errorf("failed to send notification: %w", err)
	}

	logger.Info(ctx, "OrderPaid notification sent successfully",
		zap.String("order_uuid", event.OrderUUID.String()),
		zap.String("user_uuid", event.UserUUID.String()),
		zap.Int64("chat_id", chatID))

	return nil
}

func (s *service) NotifyShipAssembled(ctx context.Context, event *model.ShipAssembledEvent) error {
	chatID, err := s.getTelegramChatID(ctx, event.UserUUID.String())
	if err != nil {
		logger.Error(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram chatID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			zap.Error(err),
			zap.String("user_uuid", event.UserUUID.String()))
		return fmt.Errorf("failed to get telegram chatID: %w", err)
	}

	message := fmt.Sprintf(
		"üöÄ –ö–æ—Ä–∞–±–ª—å —Å–æ–±—Ä–∞–Ω!\n"+
			"üì¶ ID –∑–∞–∫–∞–∑–∞: %s\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n"+
			"‚è±Ô∏è –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: %d —Å–µ–∫",
		event.OrderUUID.String(),
		event.UserUUID.String(),
		event.BuildTime,
	)

	err = s.telegramClient.SendMessage(ctx, chatID, message)
	if err != nil {
		logger.Error(ctx, "Failed to send ShipAssembled notification", zap.Error(err))
		return fmt.Errorf("failed to send notification: %w", err)
	}

	logger.Info(ctx, "ShipAssembled notification sent successfully",
		zap.String("order_uuid", event.OrderUUID.String()),
		zap.String("user_uuid", event.UserUUID.String()),
		zap.Int64("chat_id", chatID))

	return nil
}
