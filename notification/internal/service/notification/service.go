package notification

import (
	"context"
	"fmt"

	"go.uber.org/zap"

	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/client/telegram"
	"github.com/kont1n/MSA_Rocket_Factory/notification/internal/model"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/logger"
)

type service struct {
	telegramClient telegram.TelegramClient
}

// NewService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewService(telegramClient telegram.TelegramClient) *service {
	return &service{
		telegramClient: telegramClient,
	}
}

// NotifyOrderPaid –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞
func (s *service) NotifyOrderPaid(ctx context.Context, event *model.OrderPaidEvent) error {
	message := fmt.Sprintf(
		"üéâ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!\n"+
			"üì¶ ID –∑–∞–∫–∞–∑–∞: %s\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n"+
			"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: %s\n"+
			"üîë –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: %s",
		event.OrderUUID.String(),
		event.UserUUID.String(),
		event.PaymentMethod,
		event.TransactionUUID.String(),
	)

	err := s.telegramClient.SendMessage(ctx, 0, message) // 0 - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π chatID
	if err != nil {
		logger.Error(ctx, "Failed to send OrderPaid notification", zap.Error(err))
		return fmt.Errorf("failed to send notification: %w", err)
	}

	logger.Info(ctx, "OrderPaid notification sent successfully",
		zap.String("order_uuid", event.OrderUUID.String()),
		zap.String("payment_method", event.PaymentMethod),
		zap.String("transaction_uuid", event.TransactionUUID.String()))

	return nil
}

// NotifyShipAssembled –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±–æ—Ä–∫–µ –∫–æ—Ä–∞–±–ª—è
func (s *service) NotifyShipAssembled(ctx context.Context, event *model.ShipAssembledEvent) error {
	message := fmt.Sprintf(
		"üöÄ –ö–æ—Ä–∞–±–ª—å —Å–æ–±—Ä–∞–Ω!\n"+
			"üì¶ ID –∑–∞–∫–∞–∑–∞: %s\n"+
			"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n"+
			"‚è±Ô∏è –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: %d —Å–µ–∫",
		event.OrderUUID.String(),
		event.UserUUID.String(),
		event.BuildTime,
	)

	err := s.telegramClient.SendMessage(ctx, 0, message) // 0 - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π chatID
	if err != nil {
		logger.Error(ctx, "Failed to send ShipAssembled notification", zap.Error(err))
		return fmt.Errorf("failed to send notification: %w", err)
	}

	logger.Info(ctx, "ShipAssembled notification sent successfully",
		zap.String("order_uuid", event.OrderUUID.String()))

	return nil
}
