package middleware

import (
	"context"
	"time"

	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/status"

	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/logger"
)

// –¢–∏–ø—ã –∫–ª—é—á–µ–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type contextKey string

const (
	requestStartKey contextKey = "request_start"
	methodKey       contextKey = "method"
)

// MetricsMiddleware —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
type MetricsMiddleware struct {
	// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Prometheus –º–µ—Ç—Ä–∏–∫–∏
	serviceName string
}

// NewMetricsMiddleware —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π middleware –¥–ª—è –º–µ—Ç—Ä–∏–∫
func NewMetricsMiddleware(serviceName string) *MetricsMiddleware {
	return &MetricsMiddleware{
		serviceName: serviceName,
	}
}

// UnaryServerInterceptor middleware –¥–ª—è unary –º–µ—Ç–æ–¥–æ–≤
func (m *MetricsMiddleware) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
		startTime := time.Now()

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
		ctx = context.WithValue(ctx, requestStartKey, startTime)
		ctx = context.WithValue(ctx, methodKey, info.FullMethod)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
		resp, err := handler(ctx, req)

		// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		duration := time.Since(startTime)

		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
		statusCode := status.Code(err)

		// –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
		logger.Info(ctx, "üìä –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
			zap.String("service", m.serviceName),
			zap.String("method", info.FullMethod),
			zap.Duration("duration", duration),
			zap.String("status", statusCode.String()),
			zap.Bool("success", err == nil),
		)

		// –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ Prometheus
		// m.recordMetrics(info.FullMethod, duration, statusCode)

		return resp, err
	}
}

// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Prometheus:
/*
func (m *MetricsMiddleware) recordMetrics(method string, duration time.Duration, code codes.Code) {
	// Prometheus counter –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
	requestsTotal.WithLabelValues(m.serviceName, method, code.String()).Inc()

	// Prometheus histogram –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	requestDuration.WithLabelValues(m.serviceName, method).Observe(duration.Seconds())
}
*/
