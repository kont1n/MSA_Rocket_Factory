package auth

import (
	"context"
	"crypto/subtle"
	"encoding/base64"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
	"go.uber.org/zap"
	"golang.org/x/crypto/argon2"

	"github.com/kont1n/MSA_Rocket_Factory/iam/internal/config/env"
	"github.com/kont1n/MSA_Rocket_Factory/iam/internal/model"
	"github.com/kont1n/MSA_Rocket_Factory/iam/internal/repository"
	def "github.com/kont1n/MSA_Rocket_Factory/iam/internal/service"
	"github.com/kont1n/MSA_Rocket_Factory/platform/pkg/logger"
)

var _ def.AuthService = (*service)(nil)

const (
	// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
	sessionDuration = 24 * time.Hour
)

type service struct {
	iamRepository repository.IAMRepository
	jwtService    *JWTService
	blacklistSvc  *TokenBlacklistService
}

func NewService(iamRepository repository.IAMRepository, jwtConfig env.JWTConfig) *service {
	// –°–æ–∑–¥–∞–µ–º blacklist service, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—Ç –∂–µ repository –¥–ª—è –∫–µ—à–∞
	blacklistSvc := NewTokenBlacklistService(iamRepository)

	return &service{
		iamRepository: iamRepository,
		jwtService:    NewJWTService(jwtConfig, blacklistSvc),
		blacklistSvc:  blacklistSvc,
	}
}

func (s *service) Login(ctx context.Context, login, password string) (*model.Session, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if login == "" {
		logger.Warn(ctx, "üö´ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø—É—Å—Ç—ã–º –ª–æ–≥–∏–Ω–æ–º")
		return nil, model.ErrEmptyLogin
	}
	if password == "" {
		logger.Warn(ctx, "üö´ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø—É—Å—Ç—ã–º –ø–∞—Ä–æ–ª–µ–º", zap.String("login", login))
		return nil, model.ErrEmptyPassword
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
	user, err := s.iamRepository.GetUserByLogin(ctx, login)
	if err != nil {
		logger.Warn(ctx, "üö´ –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", zap.String("login", login))
		return nil, model.ErrInvalidCredentials
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
	valid, err := s.verifyPassword(password, user.PasswordHash)
	if err != nil {
		logger.Error(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è", zap.String("login", login), zap.Error(err))
		return nil, model.ErrPasswordVerification
	}
	if !valid {
		logger.Warn(ctx, "üö´ –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", zap.String("login", login), zap.String("user_uuid", user.UUID.String()))
		return nil, model.ErrInvalidCredentials
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
	session := &model.Session{
		UUID:      uuid.New(),
		UserUUID:  user.UUID,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
		ExpiresAt: time.Now().Add(sessionDuration),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
	session, err = s.iamRepository.CreateSession(ctx, session)
	if err != nil {
		return nil, model.ErrFailedToCreateSession
	}

	// –ö–µ—à–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –≤ Redis
	if err := s.iamRepository.Set(ctx, session.UUID, session, sessionDuration); err != nil {
		// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
		// –°–µ—Å—Å–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
		logger.Warn(ctx, "Failed to cache session", zap.Error(err))
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
	logger.Info(ctx, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
		zap.String("login", login),
		zap.String("user_uuid", user.UUID.String()),
		zap.String("session_uuid", session.UUID.String()))

	return session, nil
}

func (s *service) Whoami(ctx context.Context, sessionUUID uuid.UUID) (*model.Session, *model.User, error) {
	// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Cache Aside —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
	var session *model.Session
	var err error

	// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ –∫–µ—à–∞ Redis
	session, err = s.iamRepository.GetSessionFromCache(ctx, sessionUUID)
	if err != nil && !errors.Is(err, model.ErrSessionNotFound) {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", —Ç–æ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–µ—à–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ë–î
		session = nil
	}

	// –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–µ—à–∞, —á–∏—Ç–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
	if session == nil {
		session, err = s.iamRepository.GetSessionByUUID(ctx, sessionUUID)
		if err != nil {
			return nil, nil, err
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –∫–µ—à –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
		ttl := time.Until(session.ExpiresAt)
		if ttl > 0 {
			if err := s.iamRepository.Set(ctx, session.UUID, session, ttl); err != nil {
				logger.Warn(ctx, "Failed to cache session", zap.Error(err))
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
	if session.IsExpired() {
		// –£–¥–∞–ª—è–µ–º –∏—Å—Ç—ë–∫—à—É—é —Å–µ—Å—Å–∏—é –∏–∑ –∫–µ—à–∞
		if err := s.iamRepository.Delete(ctx, sessionUUID); err != nil {
			logger.Warn(ctx, "Failed to delete expired session from cache", zap.Error(err))
		}
		return nil, nil, model.ErrSessionExpired
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := s.iamRepository.GetUserByUUID(ctx, session.UserUUID)
	if err != nil {
		return nil, nil, err
	}

	return session, user, nil
}

func (s *service) Logout(ctx context.Context, sessionUUID uuid.UUID) error {
	// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
	err := s.iamRepository.DeleteSession(ctx, sessionUUID)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–µ—à–∞ (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è)
	if err := s.iamRepository.Delete(ctx, sessionUUID); err != nil {
		logger.Warn(ctx, "Failed to delete session from cache", zap.Error(err))
	}

	return nil
}

// verifyPassword –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ç–∏–≤ —Ö—ç—à–∞
func (s *service) verifyPassword(password, encodedHash string) (bool, error) {
	// –ü–∞—Ä—Å–∏–º —Ö—ç—à
	parts := strings.Split(encodedHash, "$")
	if len(parts) != 6 {
		return false, model.ErrPasswordVerification
	}

	var memory, time uint32
	var threads uint8
	_, err := fmt.Sscanf(parts[3], "m=%d,t=%d,p=%d", &memory, &time, &threads)
	if err != nil {
		return false, model.ErrPasswordVerification
	}

	salt, err := base64.RawStdEncoding.DecodeString(parts[4])
	if err != nil {
		return false, model.ErrPasswordVerification
	}

	decodedHash, err := base64.RawStdEncoding.DecodeString(parts[5])
	if err != nil {
		return false, model.ErrPasswordVerification
	}

	// –•—ç—à–∏—Ä—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	keyLen := len(decodedHash)
	if keyLen < 0 || keyLen > 0xFFFFFFFF {
		return false, model.ErrPasswordVerification
	}
	passwordHash := argon2.IDKey([]byte(password), salt, time, memory, threads, uint32(keyLen))

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
	return subtle.ConstantTimeCompare(decodedHash, passwordHash) == 1, nil
}

// JWTLogin –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º JWT —Ç–æ–∫–µ–Ω–æ–≤
func (s *service) JWTLogin(ctx context.Context, login, password string) (*model.TokenPair, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if login == "" {
		logger.Warn(ctx, "üö´ JWT: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø—É—Å—Ç—ã–º –ª–æ–≥–∏–Ω–æ–º")
		return nil, model.ErrEmptyLogin
	}
	if password == "" {
		logger.Warn(ctx, "üö´ JWT: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø—É—Å—Ç—ã–º –ø–∞—Ä–æ–ª–µ–º", zap.String("login", login))
		return nil, model.ErrEmptyPassword
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
	user, err := s.iamRepository.GetUserByLogin(ctx, login)
	if err != nil {
		logger.Warn(ctx, "üö´ JWT: –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", zap.String("login", login))
		return nil, model.ErrInvalidCredentials
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
	valid, err := s.verifyPassword(password, user.PasswordHash)
	if err != nil {
		logger.Error(ctx, "‚ùå JWT: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è", zap.String("login", login), zap.Error(err))
		return nil, model.ErrPasswordVerification
	}
	if !valid {
		logger.Warn(ctx, "üö´ JWT: –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", zap.String("login", login), zap.String("user_uuid", user.UUID.String()))
		return nil, model.ErrInvalidCredentials
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JWT
	if user.Username == "" {
		user.Username = user.Login // –∏—Å–ø–æ–ª—å–∑—É–µ–º login –∫–∞–∫ username, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ username
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã
	tokenPair, err := s.jwtService.generateTokenPair(*user)
	if err != nil {
		logger.Error(ctx, "‚ùå JWT: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤", zap.String("login", login), zap.Error(err))
		return nil, fmt.Errorf("failed to generate token pair: %w", err)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π JWT –≤—Ö–æ–¥
	logger.Info(ctx, "‚úÖ JWT: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
		zap.String("login", login),
		zap.String("user_uuid", user.UUID.String()))

	return tokenPair, nil
}

// GetAccessToken –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω –ø–æ refresh —Ç–æ–∫–µ–Ω—É
func (s *service) GetAccessToken(ctx context.Context, refreshToken string) (*model.TokenPair, error) {
	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º refresh —Ç–æ–∫–µ–Ω
	claims, err := s.jwtService.validateRefreshTokenWithContext(ctx, refreshToken)
	if err != nil {
		return nil, fmt.Errorf("invalid refresh token: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID –∏–∑ claims
	user, err := s.iamRepository.GetUserByUUID(ctx, claims.UserUUID)
	if err != nil {
		return nil, fmt.Errorf("user not found: %w", err)
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JWT
	if user.Username == "" {
		user.Username = user.Login
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω
	accessToken, accessExpiresAt, err := s.jwtService.generateAccessToken(*user)
	if err != nil {
		return nil, fmt.Errorf("failed to generate access token: %w", err)
	}

	return &model.TokenPair{
		AccessToken:           accessToken,
		RefreshToken:          refreshToken, // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ refresh —Ç–æ–∫–µ–Ω
		AccessTokenExpiresAt:  accessExpiresAt,
		RefreshTokenExpiresAt: time.Time{}, // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è refresh —Ç–æ–∫–µ–Ω–∞
	}, nil
}

// GetRefreshToken –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
func (s *service) GetRefreshToken(ctx context.Context, refreshToken string) (*model.TokenPair, error) {
	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π refresh —Ç–æ–∫–µ–Ω
	claims, err := s.jwtService.validateRefreshTokenWithContext(ctx, refreshToken)
	if err != nil {
		return nil, fmt.Errorf("invalid refresh token: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID –∏–∑ claims
	user, err := s.iamRepository.GetUserByUUID(ctx, claims.UserUUID)
	if err != nil {
		return nil, fmt.Errorf("user not found: %w", err)
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JWT
	if user.Username == "" {
		user.Username = user.Login
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
	tokenPair, err := s.jwtService.generateTokenPair(*user)
	if err != nil {
		return nil, fmt.Errorf("failed to generate token pair: %w", err)
	}

	return tokenPair, nil
}

// RevokeToken –æ—Ç–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω, –¥–æ–±–∞–≤–ª—è—è –µ–≥–æ –≤ blacklist
func (s *service) RevokeToken(ctx context.Context, tokenString string) error {
	return s.blacklistSvc.RevokeToken(ctx, tokenString)
}

// RevokeAllUserTokens –æ—Ç–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *service) RevokeAllUserTokens(ctx context.Context, userUUID uuid.UUID) error {
	return s.blacklistSvc.RevokeAllUserTokens(ctx, userUUID)
}
